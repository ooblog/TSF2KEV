#! /usr/bin/env TSF
TSF_Tab-Separated-Forth:
	TSFdoc.tsf	#TSF_runagain	#TSF_fin.
TSFdocs_files:
	../README.md	README.html	../sample/sample_aboutTSF.tsf
TSFdocs_basedoc:
	{?TSFhtmlheader}{?TSFreadmehead}{?TSFabout}{?TSFreadmebuttom}{?TSFhtmlfooter}
TSFdocs_tags:
	{?&lt}	{?&gt}	{?TAB}	{?NL}	{?INDENT}	{?BR}	{?/CODE}	{?CODE}	{?/P}	{?P}	{?/H2}	{?H2}	{?/H1}	{?H1}
	{$A_LTsv10kanedit_text}	{$A_LTsv10kanedit_href}	{$A_LTsv10kanedit_title}	{?A_LTsv10kanedit}
	{$A_LTsv10kev_text}	{$A_LTsv10kev_href}	{$A_LTsv10kev_title}	{?A_LTsv10kev}
	{$A_TSF1KEV_text}	{$A_TSF1KEV_href}	{$A_TSF1KEV_title}	{?A_TSF1KEV}
	{$A_syntaximage_title}	{$A_syntaximage_img}	{$A_syntaximage_href}	{$A_syntaximage_text}	{?A_syntaximage}
	{$A_aboutTSF_text}	{$A_aboutTSF_href}	{$A_aboutTSF_title}	{?A_aboutTSF}
	{$A_TSFdoc_text}	{$A_TSFdoc_href}	{$A_TSFdoc_title}	{?A_TSFdoc}
	{$A_yakuyon_text}	{$A_yakuyon_href}	{$A_yakuyon_title}	{?A_yakuyon}
	{$A_vimsyntax_text}	{$A_vimsyntax_href}	{$A_vimsyntax_title}	{?A_vimsyntax}
	{$U_Tahrpup_title}	{$U_Tahrpup_href}	{$U_Tahrpup_text}	{?U_Tahrpup}
	{$U_Python344_title}	{$U_Python344_href}	{$U_Python344_text}	{?U_Python344}
	{$U_dmd_title}	{$U_dmd_href}	{$U_dmd_text}	{?U_dmd}
	{$U_vim-trusty_title}	{$U_vim-trusty_href}	{$U_vim-trusty_text}	{?U_vim-trusty}
	{$U_vim-kaoriya_title}	{$U_vim-kaoriya_href}	{$U_vim-kaoriya_text}	{?U_vim-kaoriya}
	{$U_wine_title}	{$U_wine_href}	{$U_wine_text}	{?U_wine}
	{?TSFhtmlfooter}	{?TSFreadmebuttom}	{?TSFabout}	{?TSFreadmehead}	{?TSFhtmlheader}
{?TSFhtmlheader}
		{$TSFFhtmlheader}	
{$TSFFhtmlheader}
	<html lang="ja"><head>
	 <meta charset="UTF-8" />
	 <title>README.md</title>
	</head><body>
	
{?TSFreadmehead}
	{$TSFreadmehead}	{$TSFreadmehead}	
{$TSFreadmehead}
	{?H1}プログラミング言語「TSF_Tab-Separated-Forth」開発中。{?/H1}
	{?P}
	目標は「{?A_LTsv10kanedit}」の「{?A_LTsv10kev}」などをVim使わずに「TSF」だけで動かす事。実装はとりあえずPythonとD言語で。{?BR}
	TSFはまだ開発中なので、漢直やkan5x5フォントをお探しの方は「{?A_LTsv10kanedit}」をお使いください。{?BR}
	未実装の機能の一部は「{?A_TSF1KEV}」も参考。{?BR}
	{?A_syntaximage}{?BR}
	{?/P}
	{?H2}簡易版TSF解説「sample_aboutTSF.tsf」。{?/H2}
	「{?A_aboutTSF}」は「./TSF.d --about」「./TSF.py --about」でも確認できます。{?BR}
	{?CODE}
	
{?TSFabout}
	{$TSFabout}
{$TSFabout}
	{?INDENT}#! /usr/bin/env TSF
	{?INDENT}TSF_Tab-Separated-Forth:
	{?INDENT}{?TAB}echoTSF:{?TAB}#TSF_this{?TAB}#TSF_fin.
	{?INDENT}echoTSF:
	{?INDENT}{?TAB}aboutTSF:{?TAB}#TSF_argvsthe{?TAB}#TSF_echoN{?TAB}echoRPNcalc:{?TAB}#TSF_this
	{?INDENT}aboutTSF:
	{?INDENT}{?TAB}
	{?INDENT}{?TAB}○「TSF_Tab-Separated-Forth」の概要(開発予定の話も含みます)。
	{?INDENT}{?TAB}
	{?INDENT}{?TAB}　Forth風インタプリタ。単位はtsv文字列。文字列の事をカードと呼称。カードの束をスタックと呼称。スタックの集まりをデッキと呼称。
	{?INDENT}{?TAB}　ソースコード.tsfで文字から始まる行はスタック名、タブで始まる行はカード。スタック名の宣言とカードの積み込みはワンライナー記述も可能。
	{?INDENT}{?TAB}　改行のみもしくは「#」で始まる行は読み飛ばし。「#」は「#関数カード」として使うので「#」で始まるスタック名は予約ワード扱い。
	{?INDENT}{?TAB}
	{?INDENT}{?TAB}○TSFには4つの「th」、スタック代名詞「this」「that」「the」「they」という概念が存在する(theは厳密には冠詞だが便宜上代名詞扱い)。
	{?INDENT}{?TAB}
	{?INDENT}{?TAB}　「this」は実行中のスタック。#関数カードの指示通りにカードを「ドロー(積み下ろし)」したり「リターン(積み上げ)」したりする。
	{?INDENT}{?TAB}　#関数カードではないカードは後述の「that」スタックに積み上げられる。関数の返り値ではないのでリターンとは呼ばない。
	{?INDENT}{?TAB}　オーバーフローもしくは「#exit: #TSF_this」のように存在しないスタックに入る行為でオーバーフローを発生させてスタックから抜ける。
	{?INDENT}{?TAB}　TSFにループ構文は存在しないので末尾再帰がループになる。末尾だけじゃなくループの外側スタックを呼び出しても呼び出し先までのコールスタックが破棄される。
	{?INDENT}{?TAB}　TSFにはIF構文も存在しないけど「#TSF_this」に「#TSF_calc」「#TSF_peekNthe」「#TSF_aliasQON」などで呼び出し先変更を組み合わせる事で分岐は可能。
	{?INDENT}{?TAB}　「that」は積込先のスタック。#関数カードの返り値や#関数カード以外のカードが積み上げられる。
	{?INDENT}{?TAB}　「the」は指定スタック。変数や配列やテキスト保存先として扱ってるスタックが一時的に呼び出される場合の文字通り代名詞。
	{?INDENT}{?TAB}　「they」はスタック名一覧。スタック名一覧自体もカード束としてスタックの様に扱える場合がある。
	{?INDENT}{?TAB}
	{?INDENT}{?TAB}○TSFのスタック操作に4つの「p」、スタック動詞「peek」「poke」「pull」「push」が存在する。
	{?INDENT}{?TAB}
	{?INDENT}{?TAB}　「peek」スタックからカードを読み込む。読込先スタックはそのままに「that」スタックにカードが積まれるのでカードが増殖る形になる。
	{?INDENT}{?TAB}　「poke」スタックにカードを書き込む。スタックのカードは上書きされるので上書きされたカードが消失する形になる。
	{?INDENT}{?TAB}　「pull」スタックからカードを引き抜く。引抜先スタックから「that」スタックにカードが移動する形になる。
	{?INDENT}{?TAB}　「push」スタックにカードを差し込む。引抜先スタックに「that」スタックからカードが移動する形になる。
	{?INDENT}{?TAB}
	{?INDENT}{?TAB}　※ドロー(積み下ろし)は「pullFthat」、リターン(積み上げ)は「pushFthat」、してるとも言える。
	{?INDENT}{?TAB}
	{?INDENT}{?TAB}○TSFのスタック操作で選択するカード位置の副詞「F,N,C,M,V,A…」などを用意する予定。
	{?INDENT}{?TAB}
	{?INDENT}{?TAB}　「F」(Front)スタックから表択、一番上に積まれたカード(tsv表現では末尾の文字列)を選択。
	{?INDENT}{?TAB}　「N」(Number)スタックから順択、一番下のカード(tsv表現では右端の文字列)をゼロとして数値指定で選択。
	{?INDENT}{?TAB}　「C」(Cycle)スタックから周択、「N」のカウント数がスタックを上回る場合、ゼロから数え直す。
	{?INDENT}{?TAB}　「M」(liMit)スタックから囲択、「N」のカウント数がスタックを上回る場合、「F」と同様。下回る場合ゼロ。
	{?INDENT}{?TAB}　「V」(reVerse)スタックから逆択、「N」のカウントが逆順になる。一番上のカード(tsv表現では左端の文字列)をゼロとして数値指定で選択。
	{?INDENT}{?TAB}　「A」(rAndom)スタックから乱択、ランダムに選択。乱数の定義が絡む場合は「N」を用いて別な所から乱数を準備すべき。
	{?INDENT}{?TAB}　「Q」(eQual)スタックから同択、文字列と同じカードを選択。カードの枚数は動詞による。
	{?INDENT}{?TAB}　「I」(In)スタックから含択、文字列が含まれるカードを選択。カードの枚数は動詞による。
	{?INDENT}{?TAB}　「R」(Regex)スタックから規択、正規表現に該当するカードを選択。カードの枚数は動詞による。TSFを実装する言語毎に正規表現の方言が存在する問題。
	{?INDENT}{?TAB}　「H」(matcHer)スタックから似択、文字列の一致度が一定数以上のカードを選択。カードの枚数は動詞による。Python以外の言語で一致度の基準が未定義。
	{?INDENT}{?TAB}　「L」(Label)スタックから札択、ラベル付カードを選択。L:Tsvを読み込む場合などに使用。
	{?INDENT}{?TAB}
	{?INDENT}{?TAB}○TSFの文字列置換などでは多重副詞(副詞の組み合わせ)が発生します。加えてスタック名なのかカード名なのかを指定する数量詞が加わります。
	{?INDENT}{?TAB}
	{?INDENT}{?TAB}　「S」(Stack)スタックを用意、同名のカードが存在しても、スタックを用います。
	{?INDENT}{?TAB}　「D」(carD)カードを用意、同名のスタックが存在しても、スタック名そのものを1枚のカード束とみなします。
	{?INDENT}{?TAB}　「O」(stack Or card)スタックまたはカードを用意、スタックが存在すればスタックを用い、スタックが存在しなければスタック名そのものを1枚のカード束とみなします。
	{?INDENT}{?TAB}
	{?INDENT}echoRPNcalc:
	{?INDENT}{?TAB}aboutRPNtest:{?TAB}#TSF_this{?TAB}aboutRPNcalc:{?TAB}#TSF_argvsthe{?TAB}#TSF_echoN{?TAB}echoTIME:{?TAB}#TSF_this
	{?INDENT}aboutRPNtest:
	{?INDENT}{?TAB}▽「1 3 m1|2」を「[2],[1]/[0]- #TSF_join[]」で連結して「#TSF_RPN」→{?TAB}1{?TAB}3{?TAB}m1|2{?TAB}[2],[1]/[0]-{?TAB}#TSF_join[]{?TAB}#TSF_RPN{?TAB}2{?TAB}#TSF_joinN{?TAB}#TSF_echo
	{?INDENT}{?TAB}▽「1 , 3 / m1|2 -」を「6 #TSF_join」で連結して「#TSF_RPN」→{?TAB}1{?TAB},{?TAB}3{?TAB}/{?TAB}m1|2{?TAB}-{?TAB}6{?TAB}#TSF_joinN{?TAB}#TSF_RPN{?TAB}2{?TAB}#TSF_joinN{?TAB}#TSF_echo
	{?INDENT}{?TAB}▽「1 3 m1|2」を「[2]/[1]-[0] #TSF_join[]」で連結して「#TSF_calc」→{?TAB}1{?TAB}3{?TAB}m1|2{?TAB}[2]/[1]-[0]{?TAB}#TSF_join[]{?TAB}#TSF_calc{?TAB}2{?TAB}#TSF_joinN{?TAB}#TSF_echo
	{?INDENT}{?TAB}▽「1 / 3 - m1|2 」を「5 #TSF_join」で連結して「#TSF_calc」→{?TAB}1{?TAB}/{?TAB}3{?TAB}-{?TAB}m1|2{?TAB}5{?TAB}#TSF_joinN{?TAB}#TSF_calc{?TAB}2{?TAB}#TSF_joinN{?TAB}#TSF_echo
	{?INDENT}{?TAB}▽スタックからショートカットで「[aboutCALCdata:0]/[aboutCALCdata:1]-[aboutCALCdata:2] を「#TSF_calc」→{?TAB}[aboutCALCdata:0]/[aboutCALCdata:1]-[aboutCALCdata:2]{?TAB}#TSF_calc{?TAB}2{?TAB}#TSF_joinN{?TAB}#TSF_echo
	{?INDENT}{?TAB}▽漢数字テスト「億千万」を「#TSF_calcJA」→{?TAB}億千万{?TAB}#TSF_calcJA{?TAB}2{?TAB}#TSF_joinN{?TAB}#TSF_echo
	{?INDENT}{?TAB}▽漢数字テスト「六分の五」を「#TSF_calcJA」→{?TAB}６分の５{?TAB}#TSF_calcJA{?TAB}2{?TAB}#TSF_joinN{?TAB}#TSF_echo
	{?INDENT}aboutCALCdata:
	{?INDENT}{?TAB}1{?TAB}3{?TAB}m1|2
	{?INDENT}aboutRPNcalc:
	{?INDENT}{?TAB}
	{?INDENT}{?TAB}○「#TSF_RPN」逆ポーランド小数電卓の概要。
	{?INDENT}{?TAB}
	{?INDENT}{?TAB}　TSFの数式に高速処理を目指すRPNと多機能を備えるcalcの2種類の電卓を用意。
	{?INDENT}{?TAB}　RPNでは「1+2」は「1,2+」になる。数値同士はコンマで区切る。掛け算が先に演算されるなど優先順序が存在する数式は「calc」を使う。
	{?INDENT}{?TAB}　演算子の「+」プラス「-」マイナスと符号の「p」プラス「m」マイナスは分けて表記。「1-(-2)」も「1,m2-」と表記する。
	{?INDENT}{?TAB}　演算子の「/」と分数の「|」も分けて表記。分数二分の一「1|2」は小数「0.5」だが１÷２の割り算として表現する場合は「1,2/」と表記する。
	{?INDENT}{?TAB}　通常の割り算の他にも1未満を切り捨てる「\」、余りを求める「#」がある。マイナス剰余は「5#m4」だと「4-(5#4)」のように計算する。
	{?INDENT}{?TAB}　計算結果が整数になる場合、および小数の丸めで整数になってしまった場合は整数表記になる。
	{?INDENT}{?TAB}　RPNではゼロ「0|1」で割った時は分母ゼロ「n|0」を出力して終了。計算続行はされないので注意。
	{?INDENT}{?TAB}　「Z」はゼロ比較演算子(条件演算子)。「1,2,0Z」はゼロの時は真なので左の数値(1)、ゼロでない時は偽なので右の数値(2)を採用。
	{?INDENT}{?TAB}　「O」「o」「U」「u」も同様に、ゼロ以上(ゼロ含む)、ゼロより大きい、ゼロ以下(ゼロ含む)、ゼロ未満で左右の数値を選択。
	{?INDENT}{?TAB}　条件演算子とスタック名(演算を抑止する「:」演算子)を組み合わせる事で、「#TSF_this」に渡すスタック名を分岐できます(IF構文の代替)。
	{?INDENT}{?TAB}
	{?INDENT}{?TAB}○「#TSF_calc」系分数電卓の概要(RPNと共通する内容は圧縮)。
	{?INDENT}{?TAB}
	{?INDENT}{?TAB}　calcは括弧や分数なども使えます。RPN電卓も混在できます。分数を用いる事で桁溢れや丸め誤差をなるだけ回避する事を目標とします。
	{?INDENT}{?TAB}　分数を小数に変換するには「,(1|3)」のように括弧の外側でコンマを使う事でcalcの計算結果をRPNで処理する形になります。
	{?INDENT}{?TAB}　calcではRPNとは事なり、括弧が無くても「小数の分数化＞掛け算系＞足し算系＞条件演算子」のような計算順序が存在します。
	{?INDENT}{?TAB}　calcでは式に直接スタック名を「[data:2]/[data:1]-[data:0]」できるので、「#TSF_peekNthe」「#TSF_join[]」をショートカットできます。
	{?INDENT}{?TAB}　スタック名ショートカット実現のため「Z~」「z~」「O~」「o~」「U~」「u~」「N~」と条件演算子にチルダ追加。「N~」は「n|0」のチェック用途。
	{?INDENT}{?TAB}　「#TSF_-calc」を用いると計算結果の符号を「p」「m」から「-」のみに変更できる。
	{?INDENT}{?TAB}　「#TSF_calcJA」を用いると億千万円銭など通貨的な助数詞を扱う。100分の1(％)は「銭」、1000分の1(‰)は「厘」表記、1万分の1(‱)は「毛」表記。
	{?INDENT}{?TAB}
	{?INDENT}echoTIME:
	{?INDENT}{?TAB}aboutTIMEtest:{?TAB}#TSF_this{?TAB}aboutTIME:{?TAB}#TSF_argvsthe{?TAB}#TSF_echoN
	{?INDENT}aboutTIMEtest:
	{?INDENT}{?TAB}▽「time」系は準備中{?TAB}#TSF_echo
	{?INDENT}aboutTIME:
	{?INDENT}{?TAB}
	{?INDENT}{?TAB}○「time」系分数電卓も再開発中につき説明不足になります。
	{?INDENT}{?TAB}
	{?INDENT}{?TAB}　時刻取得の方法が文字列置換なので、改行やタブ文字などもエスケープ置換も予定。
	{?INDENT}{?TAB}　時刻の取得ついでに乱数の取得も一ヶ所に集める予定。
	{?INDENT}{?TAB}　「@T」でタブ、「@N」で改行に置換されます。
{?TSFreadmebuttom}
	{$TSFreadmebuttom}	{$TSFreadmebuttom}	
{$TSFreadmebuttom}
	
	{?/CODE}
	{?H2}「TSF. --about」の「RPN」「Calc」テスト部分の抜粋。{?/H2}
	{?CODE}
	{?INDENT}▽「1 3 m1|2」を「[2],[1]/[0]- #TSF_join[]」で連結して「#TSF_RPN」→p0.833333
	{?INDENT}▽「1 , 3 / m1|2 -」を「6 #TSF_join」で連結して「#TSF_RPN」→p0.833333
	{?INDENT}▽「1 3 m1|2」を「[2]/[1]-[0] #TSF_join[]」で連結して「#TSF_calc」→p5|6
	{?INDENT}▽「1 / 3 - m1|2 」を「5 #TSF_join」で連結して「#TSF_calc」→p5|6
	{?INDENT}▽スタックからショートカットで「[aboutCALCdata:0]/[aboutCALCdata:1]-[aboutCALCdata:2] を「#TSF_calc」→p5|6
	{?INDENT}▽漢数字テスト「億千万」を「#TSF_calcJA」→1億1000万円
	{?/CODE}
	{?H2}aboutTSFに書いてない細かい話やTSF2KEVで未実装な箇所とかTSF1KEVからの仕様差分など(予定)。{?/H2}
	{?P}
	☑文字コードは「UTF-8」改行は「LF」と固定。TSF1KEVにあった「UTF-8\t#TSF_encoding」は圧縮。{?BR}
	☑L:Tsvではタブの個数は関係なかったけどTSFではゼロ長文字列も扱うのでタブの重複に注意。{?BR}
	☑アンダーフローが発生しても長さゼロ文字列が帰ってくるだけ。ただし「TSF_Tab-Separated-Forth」の「#TSF_fin.」を消さないよう注意。{?BR}
	☑ハウリング(thisとthatが同じで出口が壊れてるとスタックが無限蓄積の危険性)対策のため「#TSF_countmax」(スタックのカード数え上げ枚数の上限)という安全装置は付けているけどいまいちスマートじゃない。{?BR}
	☐浮動小数の丸め指示「#TSF_calcRO」の扱いが未定。言語毎に小数の実装などにに差異があるはず。{?BR}
	☐浮動小数でははない分数の小数変換専用の#関数カードも必要だけど未着手。{?BR}
	☑分数の小数変換を「,(1|3)」と説明したのに「(,1|3)」で小数が分数になると説明しないのは、極論0.333…と0.3が区別できないので1|3と3|10が区別できなくなる恐れ。{?BR}
	☐連想配列すらない言語を今時想定する必要があるのか不明なので優先度は低いが、TSFテキストを「L:Tsv」の時の様に直接書き替えるAPIも作って置きたい(未定)。{?BR}
	☐字列の類似度「H」(matcHer)がD言語で再現できるか未定なので当面後回しになるかも。{?BR}
	☐自然対数(logｅ)は「E&#126;」。常用対数(log10)は「L&#126;」。二進対数(log2)は「l&#126;」の予定。「256l&#126;2」を8にするも「256L&#126;2」や「256E&#126;2」が8になってくれない症状は継続の予感。{?BR}
	☐「tan(θ*90|360)」なども何かしらの巨大な数ではなく0で割った「n|0」と表記したいがとりあえず未着手。{?BR}
	☐「kM&#126;1&#126;10」で1から10まで合計するような和数列(総和)、「kP&#126;1&#126;10」で積数列(総乗)を用いて乗数や階乗の計算の予定。{?BR}
	☐Calcの動作がそもそも重いorz{?BR}
	☐Calc以外にもTimeとかMatchとかShuffleとかUrlpathモジュールなどまだまだ未完成だけど「{?A_TSFdoc}」がひとまず動き出したのでTSFドキュメントの整備とか「{?A_yakuyon}」のサイトジェネレーターとか置き換えたい。{?BR}
	☐CalcとTimeのフォーマット仕様解説はaboutではなくTSFドキュメントのhtmlに用意する予定。{?BR}
	☐TSFにはまだ直接関係しないKEV(漢直)の話だけど、操作性を簡潔にするためα鍵盤を廃止して一文字検索と辞書変更のみのスマートな仕様にしたい。{?BR}
	{?/P}
	{?H2}Vimシンタックスの設定など。{?/H2}
	{?P}
	 シンタックスファイル「{?A_vimsyntax}」を「~/.vim/syntax/tsf.vim」にコピーする(syntaxフォルダは作成する)。{?BR}
	「./TSF_DMDcompile.sh」を用いてD言語でコンパイルした「./TSF」を「&#126;/my-applications/bin/TSF」としてコピーする(puppy linux Ubuntu Tahrの場合。環境毎に「echo $PATH」は異なる)。{?BR}
	Vimの「メニュー→編集(E)→起動時の設定(S)」で「&#126;/.vimrc」を開いて「filetype=tsf」や「:!TSF %」を追加する。{?BR}
	ついでに「{?A_LTsv10kev}」の設定もおまけで書いてみた。{?BR}
	{?/P}
	{?CODE}
	{?INDENT}syntax on
	{?INDENT}au BufRead,BufNewFile *.tsf set filetype=tsf
	{?INDENT}autocmd BufNewFile,BufRead *.tsf nnoremap {?&lt}F5{?&gt} :!TSF %{?&lt}CR{?&gt}
	{?INDENT}command KEVtsf  :source &#126;/TSF2KEV/KEV/kanedit.vim
	{?/CODE}
	{?H2}動作環境。{?/H2}
	{?P}
	「Tahrpup6.0.5,Python2.7.6,dmd2.074.0,vim.gtk7.4.52(vim-gtk)」および{?BR}
	「Wine1.7.18,Python3.4.4,dmd2.074.0,gvim8.0.134(KaoriYa)」で開発中。{?BR}
	{?/P}
	{?U_Tahrpup}
	{?U_Python344}
	{?U_dmd}
	{?U_vim-trusty}
	{?U_vim-kaoriya}
	{?U_wine}
	
	{?H2}ライセンス・著作権など。{?/H2}
	{?P}
	Copyright (c) 2017 ooblog{?BR}
	License: MIT{?BR}
	https://github.com/ooblog/TSF2KEV/blob/master/LICENSE{?BR}
	{?/P}
{?TSFhtmlfooter}
		{$TSFhtmlfooter}	
{$TSFhtmlfooter}
	
	</body></html>
{?A_LTsv10kanedit}
	[{$A_LTsv10kanedit_text}]({$A_LTsv10kanedit_href} "{$A_LTsv10kanedit_title}")	<a href="{$A_LTsv10kanedit_href}" title="{$A_LTsv10kanedit_title}">{$A_LTsv10kanedit_text}</a>	
{$A_LTsv10kanedit_text}
	LTsv10kanedit
{$A_LTsv10kanedit_href}
	https://github.com/ooblog/LTsv10kanedit
{$A_LTsv10kanedit_title}
	ooblog/LTsv10kanedit: 「L:Tsv」の読み書きを中心としたモジュール群と漢字入力「kanedit」のPythonによる実装です(準備中)。
{?A_LTsv10kev}
	[{$A_LTsv10kev_text}]({$A_LTsv10kev_href} "{$A_LTsv10kev_title}")	<a href="{$A_LTsv10kev_href}" title="{$A_LTsv10kev_title}">{$A_LTsv10kev_text}</a>	
{$A_LTsv10kev_text}
	LTsv/kanedit.vim
{$A_LTsv10kev_href}
	https://github.com/ooblog/LTsv10kanedit/blob/master/LTsv/kanedit.vim
{$A_LTsv10kev_title}
	LTsv/kanedit.vim at master ooblog/LTsv10kanedit
{?A_TSF1KEV}
	[{$A_TSF1KEV_text}]({$A_TSF1KEV_href} "{$A_TSF1KEV_title}")	<a href="{$A_TSF1KEV_href}" title="{$A_TSF1KEV_title}">{$A_TSF1KEV_text}</a>	
{$A_TSF1KEV_text}
	TSF1KEV
{$A_TSF1KEV_href}
	https://github.com/ooblog/TSF1KEV
{$A_TSF1KEV_title}
	ooblog/TSF1KEV: プログラミング言語「TSF_Tab-Separated-Forth」試作。開発の舞台は「TSF2KEV」以降に移行。
{?A_syntaximage}
	![{$A_syntaximage_text}]({$A_syntaximage_href} "{$A_syntaximage_title}")	<a href="{$A_syntaximage_href}"><img src="{$A_syntaximage_img}" alt="{$A_syntaximage_text}" title="{$A_syntaximage_title}" width="512" height="384"></a>		
{$A_syntaximage_text}
	TSF syntax image
{$A_syntaximage_href}
	https://github.com/ooblog/TSF2KEV/blob/master/TSFdoc/TSF_512x384.png
{$A_syntaximage_img}
	https://github.com/ooblog/TSF2KEV/raw/master/TSFdoc/TSF_512x384.png
{$A_syntaximage_title}
	TSF2KEV/TSF_512x384.png at master ooblog/TSF2KEV
{?A_aboutTSF}
	[{$A_aboutTSF_text}]({$A_aboutTSF_href} "{$A_aboutTSF_title}")	<a href="{$A_aboutTSF_href}" title="{$A_aboutTSF_title}">{$A_aboutTSF_text}</a>	
{$A_aboutTSF_text}
	sample_aboutTSF.tsf
{$A_aboutTSF_href}
	https://github.com/ooblog/TSF2KEV/blob/master/sample/sample_aboutTSF.tsf
{$A_aboutTSF_title}
	TSF2KEV/sample_aboutTSF.tsf at master ooblog/TSF2KEV
{?A_TSFdoc}
	[{$A_TSFdoc_text}]({$A_TSFdoc_href} "{$A_TSFdoc_title}")	<a href="{$A_TSFdoc_href}" title="{$A_TSFdoc_title}">{$A_TSFdoc_text}</a>	
{$A_TSFdoc_text}
	TSFdoc.tsf
{$A_TSFdoc_href}
	https://github.com/ooblog/TSF2KEV/blob/master/TSFdoc/TSFdoc.tsf
{$A_TSFdoc_title}
	TSF2KEV/TSFdoc.tsf at master ooblog/TSF2KEV
{?A_yakuyon}
	[{$A_yakuyon_text}]({$A_yakuyon_href} "{$A_yakuyon_title}")	<a href="{$A_yakuyon_href}" title="{$A_yakuyon_title}">{$A_yakuyon_text}</a>	
{$A_yakuyon_text}
	約四文字
{$A_yakuyon_href}
	https://ooblog.github.io/
{$A_yakuyon_title}
	「約四文字」(http://ooblog.github.io/)
{?A_vimsyntax}
	[{$A_vimsyntax_text}]({$A_vimsyntax_href} "{$A_vimsyntax_title}")	<a href="{$A_vimsyntax_href}" title="{$A_vimsyntax_title}">{$A_vimsyntax_text}</a>	
{$A_vimsyntax_text}
	vimsyntax/tsf.vim
{$A_vimsyntax_href}
	https://github.com/ooblog/TSF2KEV/blob/master/vimsyntax/tsf.vim
{$A_vimsyntax_title}
	TSF2KEV/tsf.vim at master ooblog/TSF2KEV
{?U_Tahrpup}
	* {$U_Tahrpup_text}{?NL}    * [{$U_Tahrpup_href}]({$U_Tahrpup_href} "{$U_Tahrpup_title}")	<ul><li>{$U_Tahrpup_text}<ul><li><a href="{$U_Tahrpup_href}" title="{$U_Tahrpup_title}">{$U_Tahrpup_href}</a></li></ul></li></ul>	
{$U_Tahrpup_text}
	Tahrpup6.0.5(Puppy Linux)
{$U_Tahrpup_href}
	http://puppylinux.com/
{$U_Tahrpup_title}
	Puppy Linux Home
{?U_Python344}
	* {$U_Python344_text}{?NL}    * [{$U_Python344_href}]({$U_Python344_href} "{$U_Python344_title}")	<ul><li>{$U_Python344_text}<ul><li><a href="{$U_Python344_href}" title="{$U_Python344_title}">{$U_Python344_href}</a></li></ul></li></ul>	
{$U_Python344_text}
	Python 3.4.4
{$U_Python344_href}
	https://www.python.org/downloads/release/python-344/
{$U_Python344_title}
	Python Release Python 3.4.4 | Python.org
{?U_dmd}
	* {$U_dmd_text}{?NL}    * [{$U_dmd_href}]({$U_dmd_href} "{$U_dmd_title}")	<ul><li>{$U_dmd_text}<ul><li><a href="{$U_dmd_href}" title="{$U_dmd_title}">{$U_dmd_href}</a></li></ul></li></ul>	
{$U_dmd_text}
	DMD 2.074.0
{$U_dmd_href}
	https://dlang.org/download.html
{$U_dmd_title}
	Downloads - D Programming Language
{?U_vim-trusty}
	* {$U_vim-trusty_text}{?NL}    * [{$U_vim-trusty_href}]({$U_vim-trusty_href} "{$U_vim-trusty_title}")	<ul><li>{$U_vim-trusty_text}<ul><li><a href="{$U_vim-trusty_href}" title="{$U_vim-trusty_title}">{$U_vim-trusty_href}</a></li></ul></li></ul>	
{$U_vim-trusty_text}
	vim-gtk(Ubuntu trusty)
{$U_vim-trusty_href}
	https://packages.ubuntu.com/trusty/vim-gtk
{$U_vim-trusty_title}
	Ubuntu – trusty の vim-gtk パッケージに関する詳細
{?U_vim-kaoriya}
	* {$U_vim-kaoriya_text}{?NL}    * [{$U_vim-kaoriya_href}]({$U_vim-kaoriya_href} "{$U_vim-kaoriya_title}")	<ul><li>{$U_vim-kaoriya_text}<ul><li><a href="{$U_vim-kaoriya_href}" title="{$U_vim-kaoriya_title}">{$U_vim-kaoriya_href}</a></li></ul></li></ul>	
{$U_vim-kaoriya_text}
	Vim — KaoriYa
{$U_vim-kaoriya_href}
	https://www.kaoriya.net/software/vim/
{$U_vim-kaoriya_title}
	Vim — KaoriYa
{?U_wine}
	* {$U_wine_text}{?NL}    * [{$U_wine_href}]({$U_wine_href} "{$U_wine_title}")	<ul><li>{$U_wine_text}<ul><li><a href="{$U_wine_href}" title="{$U_wine_title}">{$U_wine_href}</a></li></ul></li></ul>	
{$U_wine_text}
	Portable Wine(shinobar.server-on.net)
{$U_wine_href}
	http://shinobar.server-on.net/puppy/opt/wine-portable-HELP_ja.html
{$U_wine_title}
	Portable Wine
{?H1}
	# 	<h1>	
{?/H1}
		</h1>	
{?H2}
	## 	<h2>	
{?/H2}
		</h2>	
{?P}
		<p>	
{?/P}
		</p>	
{?CODE}
		<pre><code>	
{?/CODE}
		</code></pre>	
{?BR}
	  	<br />	
{?INDENT}
	    		
{?TAB}
	@T
{?NL}
	@E
{?&lt}
	<	&lt;	
{?&gt}
	>	&gt;	
