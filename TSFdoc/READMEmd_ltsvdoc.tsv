[L:Tsv|
code	UTF-8
enter	LF
tab	4
program	LTsv_doc.py
1st		LTsv_doc
LTsvver	20161128M153500
modify	20161130W154333
|L:Tsv]

[LTsv_doc|
main	<＠TSF2KEV/README.md>
tagseparate	*
skplist	LTsv_doc
outdir	./
outlist	<＠TSF2KEV/README_outlist>
defdir	./
deftag	L:<！	R:>
defindent	firstL:<？firstL>	firstR:<？firstR>	restL:<？restL>	restC:<？restC>	restR:<？restR>	restRLast:<？restRLast>
LTsvver	<＠L:TsvLTsvver>
|LTsv_doc]

[<＠TSF2KEV/README.md>|
<？LTsv_MD_header><？LTsv_MD_H1:TSF2KEV>
<？P>
目標は「<？https/LTsv10>」の「<？https/kanedit.vim>」などをVim使わずに「TSF」だけで動かす事。実装はとりあえずPythonとD言語で。<？BR>
TSFはまだ開発中なので、漢直やkan5x5フォントをお探しの方は「<？https/LTsv10>」をお使いください。<？BR>
開発途中のものでもいいから動くTSFをお探しの方は「<？https/TSF1KEV>」を参考。<？BR>
<？/P>

<？LTsv_MD_H2:TSF2about>
<？CODE>
    TSF_Tab-Separated-Forth:
    	echoTSF:	#TSF_this	#TSF_fin.
    echoTSF:
    	aboutTSF:	#TSF_argvsthe	#TSF_echoN	echoRPN:	#TSF_this
    aboutTSF:
    	
    	○「TSF_Tab-Separated-Forth」の概要(開発予定の話も含みます)。
    	
    	　Forth風インタプリタ。単位はtsv文字列。文字列の事をカードと呼称。カードの束をスタックと呼称。スタックの集まりをデッキと呼称。
    	　ソースコード.tsfで文字から始まる行はスタック名、タブで始まる行はカード。スタック名の宣言とカードの積み込みはワンライナー記述も可能。
    	　改行のみもしくは「#」で始まる行は読み飛ばし。「#」は「#関数カード」として使うので「#」で始まるスタック名は予約ワード扱い。
    	
    	○TSFには4つの「th」、スタック代名詞「this」「that」「the」「they」という概念が存在する(theは厳密には冠詞だが便宜上代名詞扱い)。
    	
    	　「this」は実行中のスタック。#関数カードの指示通りにカードを「ドロー(積み下ろし)」したり「リターン(積み上げ)」したりする。
    	　#関数カードではないカードは後述の「that」スタックに積み上げられる。関数の返り値ではないのでリターンとは呼ばない。
    	　オーバーフローもしくは「#exit #TSF_this」のように存在しないスタックに入る行為でオーバーフローを発生させてスタックから抜ける。
    	　TSFにループ構文は存在しないので末尾再帰がループになる。同様にループの内側からループの外側スタックを呼び出してもコールスタックが破棄される。
    	　TSFにはif構文も存在しないので「#TSF_this」の飛び先を事前に書き換える形になる。条件演算子は「#TSF_RPN」「#TSF_calc」の中にある。
    	　「that」は積込先のスタック。#関数カードの返り値や#関数カード以外のカードが積み上げられる。
    	　「the」は指定スタック。変数や配列やテキスト保存先として扱ってるスタックが一時的に呼び出される場合の文字通り代名詞。
    	　「they」はスタック名一覧。スタック名一覧自体もカード束としてスタックの様に扱える場合がある。
    	
    	○TSFのスタック操作に4つの「p」、スタック動詞「peek」「poke」「pull」「push」が存在する。
    	
    	　「peek」スタックからカードを読み込む。読込先スタックはそのままに「that」スタックにカードが積まれるのでカードが増殖る形になる。
    	　「poke」スタックにカードを書き込む。スタックのカードは上書きされるので上書きされたカードが消失する形になる。
    	　「pull」スタックからカードを引き抜く。引抜先スタックから「that」スタックにカードが移動する形になる。
    	　「push」スタックにカードを差し込む。引抜先スタックに「that」スタックからカードが移動する形になる。
    	
    	　※ドローは「pullFthat」、リターンは「pushFthat」、してるとも言える。
    	
    	○TSFのスタック操作で選択するカード位置の副詞「F,N,C,M,V,A…」を用意する予定。※「F」「N」「M」以外の副詞は準備中です。
    	
    	　「F」(Front)スタックから表択、一番上に積まれたカード(tsv表現では末尾の文字列)を選択。
    	　「N」(Number)スタックから順択、一番下のカード(tsv表現では右端の文字列)をゼロとして数値指定で選択。
    	　「C」(Cycle)スタックから周択、「N」のカウント数がスタックを上回る場合、ゼロから数え直す。
    	　「M」(liMit)スタックから囲択、「N」のカウント数がスタックを上回る場合、「F」と同様。下回る場合ゼロ。
    	　「V」(reVerse)スタックから逆択、「N」のカウントが逆順になる。一番上のカード(tsv表現では左端の文字列)をゼロとして数値指定で選択。
    	　「A」(rAndom)スタックから乱択、ランダムに選択。乱数の定義が絡む場合は「N」を用いて別な所から乱数を準備すべき。
    	　「Q」(eQual)スタックから同択、文字列と同じカードを選択。カードの枚数は動詞による。
    	　「I」(In)スタックから含択、文字列が含まれるカードを選択。カードの枚数は動詞による。
    	　「R」(reseaRch)スタックから規択、正規表現に該当するカードを選択。カードの枚数は動詞による。TSFを実装する言語毎に正規表現の方言が存在する問題。
    	　「H」(matcHer)スタックから似択、文字列の一致度が一定数以上のカードを選択。Python以外の言語で一致度の基準が未定義。
    	　「L」(Label)スタックから札択、ラベル付カードを選択。L:Tsvを読み込む場合などに使用。
    	
    echoRPN:
    	aboutRPNtest:	#TSF_this	aboutRPN:	#TSF_argvsthe	#TSF_echoN	echoCALC:	#TSF_this
    aboutRPNtest:
    	▽「1 3 m1|2」を「[2],[1]/[0]- #TSF_join[]」で連結→	1	3	m1|2	[2],[1]/[0]-	#TSF_join[]	#TSF_RPN	2	#TSF_joinN	#TSF_echo	▽「1 , 3 / m1|2 -」を「#TSF_join」で連結→	1	,	3	/	m1|2	-	6	#TSF_joinN	#TSF_RPN	2	#TSF_joinN	#TSF_echo
    aboutRPN:
    	
    	○「RPN」系小数電卓の概要。
    	
    	　TSFでは機能を絞って高速処理をめざすRPNと多機能をめざすcalcの2種類の電卓を用意。RPN(逆ポーランド記法)では括弧を用いません。
    	　RPNでは「1+2」は「1,2+」になる。数値同士はコンマで区切る。掛け算が先に演算されるなど優先順序が存在する数式は「calc」を使う。
    	　演算子の「+」プラス「-」マイナスと符号の「p」プラス「m」マイナスは分けて表記。「1-(-2)」を「1,m2-」と表記する。
    	　演算子の「/」と分数の「|」も分けて表記。分数二分の一「1|2」は小数「0.5」だが１÷２の割り算として表現する場合は「1,2/」と表記する。
　通常の割り算の他にも1未満を切り捨てる「\」、余りを求める「#」がある。マイナス剰余は「5#m4」だと「4-(5#4)」のように計算する。
    	　計算結果が整数になる場合、および小数の丸めで整数になってしまった場合は整数表記になる。
    	　RPNではゼロ「0|1」で割った時は分母ゼロ「n|0」を出力して終了。計算続行はされないので注意。
    	　「Z」はゼロ比較演算子(条件演算子)。「1,2,0Z」はゼロの時は真なので左の数値(1)、ゼロでない時は偽なので右の数値(2)を採用。
    	　「O」「o」「U」「u」も同様に、ゼロ以上(ゼロ含む)、ゼロより大きい、ゼロ以下(ゼロ含む)、ゼロ未満で左右の数値を選択。
    	　条件演算子は何に使うかというと「#TSF_this」の飛び先を変更するため「#TSF_peekthe」などと組み合わせます。
    	
    echoCALC:
    	aboutCALCtest:	#TSF_this	aboutCALC:	#TSF_argvsthe	#TSF_echoN	echoTIME:	#TSF_this
    aboutCALCtest:
    	▽「calc」系準備中	#TSF_echo
    aboutCALC:
    	
    	○「calc」系分数電卓は再開発中なので説明不足します(RPNと共通する内容は圧縮)。
    	
    	　calcは括弧と分数も使えます。RPN(小数)も混在できます。分数を用いる事で桁溢れや丸め誤差をなるだけ回避する事を目標とします。
    	　calcではRPNとは事なり、括弧が無くても「小数の分数化＞掛け算系＞足し算系＞条件演算子」のような計算順序が存在します。
    	　calcではスタック名(演算を行わない「:」演算子)の可能性などを考慮して「n|0」が発生しても計算は続行されます。
    	　言い方を買えると、calcでは比較演算子(条件演算子)の式に直接スタック名を指定できるので「#TSF_peekNthe」などをショートカットできます。
    	　「#TSF_peekNthe」や「#TSF_join[]」などを別途用いる事無く「[data:2]/[data:1]-[data:0]」のようなショートカットもできます。
    	　スタック名ショートカット実現のため「Z~」「z~」「O~」「o~」「U~」「u~」「N~」と演算子にチルダ追加。「N~」は「n|0」のチェック用途。
    	　億千万円銭など通貨的な助数詞を扱う「#TSF_calcJA」なども予定。
    	
    echoTIME:
    	aboutTIMEtest:	#TSF_this	aboutTIME:	#TSF_argvsthe	#TSF_echoN
    aboutTIMEtest:
    	▽「time」系は準備中	#TSF_echo
    aboutTIME:
    	
    	○「time」系分数電卓も再開発中につき説明不足になります。
    	
    	　時刻取得の方法が文字列置換なので、改行やタブ文字なども置換。
    	　大抵の言語では乱数の生成がマシン時刻に依存してるはずなので時刻の取得と乱数の取得も一ヶ所に集める予定。
    	
<？/CODE><？P><？/P><？CODE>
    ▽「1 3 m1|2」を「[2],[1]/[0]- #TSF_join[]」で連結して「#TSF_RPN」→p0.833333333333
    ▽「1 , 3 / m1|2 -」を「6 #TSF_join」で連結して「#TSF_RPN」→p0.833333333333
    ▽「1 3 m1|2」を「[2]/[1]-[0] #TSF_join[]」で連結して「#TSF_calc」→p5|6
    ▽「1 / 3 - m1|2 」を「5 #TSF_join」で連結して「#TSF_calc」→p5|6
    ▽スタックからショートカットで「[aboutCALCdata:0]/[aboutCALCdata:1]-[aboutCALCdata:2] #TSF_calc」→p5|6
<？/CODE>

<？LTsv_MD_H2:TSF2change>
<？P>
・文字コードは「UTF-8」改行は「LF」と固定。TSF1KEVにあった「UTF-8\t#TSF_encoding」は圧縮。<？BR>
・アンダーフローが発生しても長さゼロ文字列が帰ってくるだけ。ただし「TSF_Tab-Separated-Forth」の「#TSF_fin.」を消さないよう注意。<？BR>
・念のため「#TSF_countmax」(スタックのカード数え上げ枚数の上限)という安全装置は付けているけどいまいちスマートじゃない。<？BR>
・「#TSF_calc」には小数変換の「D」演算子や分岐先スタック名などテキストを温存する「T」演算子などを用意する予定。<？BR>
・億千万電卓「#TSF_calcKN」(かな)は「#TSF_calcJA」のように言語ロケールに寄せる形で置き換える。。小数点の代わりに「円」を表示する。100分の1(％)は「銭」、1000分の1(‰)は「厘」表記、10000分の1(‱)は「毛」表記。<？BR>
・連想配列すらない言語を今時想定する必要があるのか不明なので優先度は低いが、TSFテキストを「L:Tsv」の時の様に直接書き替えるAPIも作って置きたい(未定)。<？BR>
・文字列の類似度がD言語で再現できるか未定なので当面後回しになるかも。<？BR>
・timeとかmatchとかも用意しないと「TSF_doc」が作れないのではがゆい。「約四文字」を「TSF_doc」で置き換えたい。<？BR>
・言語(D言語のbigintとPythonのdecimal)毎に10進数に有効桁数の有無や端数処理そもそも小数不可やなどの差異があるので「#TSF_calcPR」の扱いがどうなるか未定。<？BR>
・「tan(θ*90|360)」なども何かしらの巨大な数ではなく0で割った「n|0」と表記したいがとりあえず未着手。<？BR>
・自然対数(logｅ)は「E~」。常用対数(log10)は「L~」。二進対数(log2)は「l~」の予定。「256l~2」を8にするも「256L~2」や「256E~2」が8になってくれない症状は継続の予感。<？BR>
・「kM~1~10」で1から10まで合計するような和数列(総和)、「kP~1~10」で積数列(総乗)を用いて乗数や階乗の計算の予定。<？BR>
<？/P>

<？LTsv_MD_H2:environment>

<？P>「Tahrpup6.0.5,Python2.7.6,dmd2.073.0,vim.gtk7.4.52&#40;vim-gtk&#41;」および「Wine1.7.18,Python3.4.4,dmd2.073.0,gvim8.0.134&#40;KaoriYa&#41;」で開発中。<？BR>
<？/P>

<？LTsv_MD_H2:LICENSE>

<？P>Copyright (c) 2017 ooblog<？BR>
License: MIT<？BR>
<？https/TSF2KEV:LICENSE><？BR>
<？/P><？LTsv_MD_footer>
|<＠TSF2KEV/README.md>]

[<？LTsv_MD_header>|
.+\.html?	<＃LTsv_HTML_header>
.+\.md	
|<？LTsv_MD_header>]

[<＃LTsv_HTML_header>|
<html lang="ja"><head>
 <meta charset="UTF-8" />
 <title>README.md</title>
</head><body>
|<＃LTsv_HTML_header>]

[<？LTsv_MD_footer>|
.+\.html?	@E<＃LTsv_HTML_footer>
.+\.md	
|<？LTsv_MD_footer>]

[<＃LTsv_HTML_footer>|
</body></html>
|<＃LTsv_HTML_footer>]

[<？LTsv_MD_H1:TSF2KEV>|
:<＄LTsv_MD_H1:0>	プログラミング言語「TSF_Tab-Separated-Forth」開発中。
.+\.html?	<h1><＄LTsv_MD_H1:@c></h1>
.+\.md	# <＄LTsv_MD_H1:@c>
|<？LTsv_MD_H1:TSF2KEV>]

[<？LTsv_MD_H2:TSF2change>*<？LTsv_MD_H2:TSF1about>*<？LTsv_MD_H2:TSF2about>*<？LTsv_MD_H2:environment>*<？LTsv_MD_H2:LICENSE>|
:<＄LTsv_MD_H2:0>	aboutに書いてない細かい話やTSF2KEVで未実装な箇所とかTSF1KEVからの仕様差分など(予定)。
:<＄LTsv_MD_H2:1>	参考用にTSF1KEVの「TSF.py --about」の抜粋も併記。
:<＄LTsv_MD_H2:2>	「TSF.d --about」「TSF.py --about」より抜粋。
:<＄LTsv_MD_H2:3>	動作環境。
:<＄LTsv_MD_H2:4>	ライセンス・著作権など。
.+\.html?	<h2><＄LTsv_MD_H2:@c></h2>
.+\.md	## <＄LTsv_MD_H2:@c>
|<？LTsv_MD_H2:TSF2change>*<？LTsv_MD_H2:TSF1about>*<？LTsv_MD_H2:TSF2about>*<？LTsv_MD_H2:environment>*<？LTsv_MD_H2:LICENSE>]

[<？https/kanedit.vim>|
:<＄href/htmldoc-0>	<＄txt/htmldoc-0>
:<＄title/htmldoc-0>	<＄txt/htmldoc-0>
:<＄txt/htmldoc-0>	LTsv/kanedit.vim
.+\.html?	<a href="<？ooblog:LTsv10repository_blob><＄href/htmldoc-@c>" title="<＄title/htmldoc-@c>"><＄txt/htmldoc-@c></a>
.+\.md	[<＄txt/htmldoc-@c>](<＄href/htmldoc-@c> "<＄title/htmldoc-@c>")
|<？https/kanedit.vim>]

[<？ooblog:LTsv10repository_raw>*<？ooblog:LTsv10repository_blob>|
:<＄repository-0>	raw/master/
:<＄repository-1>	blob/master/
.*	<？ooblog:LTsv10repository_url><＄repository-@c>
|<？ooblog:LTsv10repository_raw>*<？ooblog:LTsv10repository_blob>]

[<？ooblog:LTsv10repository_txt>|
.*	「LTsv10kanedit(tsvtool10)」は「L:Tsv」の読み書きを中心としたモジュール群です。
|<？ooblog:LTsv10repository_txt>]
[<？ooblog:LTsv10repository_url>|
.*	https://github.com/ooblog/LTsv10kanedit/
|<？ooblog:LTsv10repository_url>]

[<？https/TSF2KEV:LICENSE>|
:<＄href/htmldoc-0>	LICENSE
:<＄title/htmldoc-0>	<＄txt/htmldoc-0>
:<＄txt/htmldoc-0>	<？ooblog:TSF2KEVrepository_url>blob/master/LICENSE
.+\.html?	<a href="<？ooblog:TSF2KEVrepository_blob><＄href/htmldoc-@c>" title="<＄title/htmldoc-@c>"><＄txt/htmldoc-@c></a>
.+\.md	[<＄txt/htmldoc-@c>](<＄href/htmldoc-@c> "<＄title/htmldoc-@c>")
|<？https/TSF2KEV:LICENSE>]

[<？ooblog:TSF2KEVrepository_raw>*<？ooblog:TSF2KEVrepository_blob>|
:<＄repository-0>	raw/master/
:<＄repository-1>	blob/master/
.*	<？ooblog:TSF2KEVrepository_url><＄repository-@c>
.*	<？ooblog:TSF2KEVrepository_url><＄repository-@c>
|<？ooblog:TSF2KEVrepository_raw>*<？ooblog:TSF2KEVrepository_blob>]

[<？ooblog:TSF2KEVrepository_txt>|
.*	「LTsv10kanedit(tsvtool10)」は「L:Tsv」の読み書きを中心としたモジュール群です。
|<？ooblog:TSF2KEVrepository_txt>]
[<？ooblog:TSF2KEVrepository_url>|
.*	https://github.com/ooblog/TSF2KEV/
|<？ooblog:TSF2KEVrepository_url>]

[<？https/LTsv10>|
:<＄href/htmldoc-0>	https://github.com/ooblog/LTsv10kanedit
:<＄title/htmldoc-0>	ooblog/LTsv10kanedit: 「L:Tsv」の読み書きを中心としたモジュール群と漢字入力「kanedit」のPythonによる実装です(準備中)。
:<＄txt/htmldoc-0>	LTsv10kanedit
.+\.html?	<a href="<＄href/htmldoc-@c>" title="<＄title/htmldoc-@c>"><＄txt/htmldoc-@c></a>
.+\.md	[<＄txt/htmldoc-@c>](<＄href/htmldoc-@c> "<＄title/htmldoc-@c>")
|<？https/LTsv10>]

[<？https/TSF1KEV>|
:<＄href/htmldoc-0>	https://github.com/ooblog/TSF1KEV
:<＄title/htmldoc-0>	プログラミング言語「TSF_Tab-Separated-Forth」試作。開発の舞台は「TSF2KEV」以降に移行。
:<＄txt/htmldoc-0>	TSF1KEV
.+\.html?	<a href="<＄href/htmldoc-@c>" title="<＄title/htmldoc-@c>"><＄txt/htmldoc-@c></a>
.+\.md	[<＄txt/htmldoc-@c>](<＄href/htmldoc-@c> "<＄title/htmldoc-@c>")
|<？https/TSF1KEV>]

[<？https/TSF2KEV>|
:<＄href/htmldoc-0>	https://github.com/ooblog/TSF2KEV
:<＄title/htmldoc-0>	ooblog/TSF2KEV: プログラミング言語「TSF_Tab-Separated-Forth」開発中。目標は「LTsv10kanedit」の「kanedit.vim」などを「TSF」だけで動かす事。実装はとりあえずPythonとD言語で。
:<＄txt/htmldoc-0>	TSF2KEV
.+\.html?	<a href="<＄href/htmldoc-@c>" title="<＄title/htmldoc-@c>"><＄txt/htmldoc-@c></a>
.+\.md	[<＄txt/htmldoc-@c>](<＄href/htmldoc-@c> "<＄title/htmldoc-@c>")
|<？https/TSF2KEV>]


[<？P>|
.+\.html?	<p>@E
.*	
|<？P>]
[<？/PP>|
.+\.html?	</p><p>
.*	
|<？/PP>]
[<？/P>|
.+\.html?	@E</p>
.*	
|<？/P>]
[<？BR>|
.+\.html?	<br />
.+\.md	  
.*	
|<？BR>]
[<？CODE>|
.+\.html?	@E<pre><code>
.*	
|<？CODE>]
[<？/CODE>|
.+\.html?	</code></pre>@E
.*	
|<？/CODE>]

[<？&lt;>|
.+\.html?	&lt;
.*	<
|<？&lt;>]
[<？&gt;>|
.+\.html?	&gt;
.*	>
|<？&gt;>]
[<？&#x7C;>|
.+\.html?	&#x7C;
.*	|
|<？&#x7C;>]
[<？@T>|
.*	@T
|<？@T>]

[<＠TSF2KEV/README_outlist>|
../../TSF2KEV/README.md		README.md
../../TSF2KEV/TSFdoc/README.html	README.html
|<＠TSF2KEV/README_outlist>]


# Copyright (c) 2017 ooblog
# License: MIT
# https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE
