#! /usr/bin/env TSF
TSF_Tab-Separated-Forth:
	../docs/TSFindex.tsf	../sample/TSFdoc.tsf	2	#TSF_runagainN	#TSF_fin.
TSFdocs_files:
	../docs/index.html	../docs/404.html	../docs/TSFdoc.html	../docs/KEV2.html
TSFdocs_basedocs:
	index_html:	404_html:	TSFdoc_html:	KEV2_html:
index_html:
	{?TSFhtmlheader}{?TSFbodyheader}{?TSFasidenav}{?TSFsections}{?TSFbodyfooter}{?TSFhtmlfooter}
404_html:
	{?TSFhtmlheader}{?TSFbodyheader}{?TSFasidenav}{?TSFsections}{?TSFbodyfooter}{?TSFhtmlfooter}
TSFdoc_html:
	{?TSFhtmlheader}{?TSFbodyheader}{?TSFasidenav}{?TSFsections}{?TSFbodyfooter}{?TSFhtmlfooter}
KEV2_html:
	{?TSFhtmlheader}{?TSFbodyheader}{?TSFasidenav}{?TSFsections}{?TSFbodyfooter}{?TSFhtmlfooter}
TSFdocs_imports:
	../TSF.py
{@TSF_main}
	../TSF.py
TSFimport_ext:
	.py
TSFimport_regex:
	regex_Python:	:regex_none:
regex_Python:
	regexPython_reg:	regexPython_txt:	#TSF_replacesRSN
regexPython_reg:
	^(?!def).+$	^\n	def 	@NL	^@dddt	$
	@DLDT	:[ /]+#[a-zA-Z]+:	@dddt
regexPython_txt:
			@NL@DLDT	@dddt{?NL}		@dddt
	   <dl><dt>	</dt><dd>	</dd></dl>
regex_none:
	#TSF_pullFthat
TSFdocs_tags:
	{?&lt}	{?&gt}	{?TAB}	{?NL}	{?INDENT}	{?BR}	{?/CODE}	{?CODE}
	{@TSF_main}
	{?TITLE}	{?MODIFY}	{$TITLE_KEV2}	{$TITLE_TSFdoc}	{$TITLE_index}
	{?TSFapi00title}
	{?TSFgrammar09title}	{?TSFgrammar08title}	{?TSFgrammar07title}	{?TSFgrammar06title}	{?TSFgrammar05title}	{?TSFgrammar04title}	{?TSFgrammar03title}	{?TSFgrammar02title}	{?TSFgrammar01title}	{?TSFgrammar00title}
	{?TSFicon}	{?TSFfaq00title}	{?TSFaddress00title}
	{?TSFlicense03title}	{?TSFlicense02title}	{?TSFlicense02}	{?TSFlicense01title}	{?TSFlicense00title}	{?TSFlicense00}
	{?TSFhtmlheader}	{?TSFbodyheader}	{?TSFasidenav}	{?TSFsections}	{?TSFbodyfooter}	{?TSFhtmlfooter}
{?TSFhtmlheader}
	{$TSFhtmlheader}
{$TSFhtmlheader}
	<html lang="ja"><head>
	 <meta charset="UTF-8" />
	 <title>{?TITLE}</title>
	 <link rel="stylesheet" type="text/css" href="TSFdoc.css" />
	 <link rel="icon" type="image/png" href="TSF2KEV_icon.png" />
	</head><body>
	
{?TSFasidenav}
	{$TSFasidenav}
{$TSFasidenav}
	 <header><nav>
	  <div class="yonmoji_root"><a href="https://ooblog.github.io/" rel="publisher" title="「約四文字」(http://ooblog.github.io/)">約四<br /></a><a href="https://ooblog.github.io/" rel="publisher" title="「約四文字」(http://ooblog.github.io/)">文字</a></div>
	  <span> &#62; <a href="https://ooblog.github.io/TSF.html" title="TSV - 「約四文字」(http://ooblog.github.io/)">TSF</a> &#62; <mark class="applogo">{?TSFicon}</mark></span> <span class="yonmoji_sitemap"><a href="https://ooblog.github.io/404.html" title="404 - 「約四文字」(http://ooblog.github.io/)">「約四文字」のsitemap(404)</a></span>
	  <br class="yonmoji_both" />
	 </div></header>
	 <aside class="sidepages"><nav>
	  <ul>
	   <li><a href="index.html"><img src="TSF2KEV_icon.png" width="48" height="48" alt="TSF2KEV" title="TSF2KEV"></a></li>
	   <li><a href="TSFdoc.html"><img src="TSFdoc_icon.png" width="48" height="48" alt="TSFdoc" title="TSFdoc"></a></li>
	   <li><a href="KEV2.html"><img src="KEV2_icon.png" width="48" height="48" alt="KEV2" title="KEV2"></a></li>
	  </ul>
	  <p>
	   <a href="404.html" title="404">「TSF2KEV」のsitemap(404)</a>
	  </p>
	 </nav></aside>
	 <section class="mainpages">
	  <h1>{?TITLE}</h1>
	  <p>
	   version(branch):20170528U134416{?MODIFY}(執筆途中です)<br>
	  </p>
{?TSFsections}
	{$TSFsection_index}	{$TSFsection_404}	{$TSFsection_TSFdoc}	{$TSFsection_KEV2}
{$TSFsection_index}
	  <ul>
	   <li><a href="#License-0" title="{?TSFlicense00title}">{?TSFlicense00title}</a></li>
	   <li><a href="#License-1" title="{?TSFlicense01title}">{?TSFlicense01title}</a></li>
	   <li><a href="#License-2" title="{?TSFlicense02title}">{?TSFlicense02title}</a></li>
	   <li><a href="#License-3" title="{?TSFlicense03title}">{?TSFlicense03title}</a></li>
	   <li><a href="#grammar-0" title="{?TSFgrammar00title}">{?TSFgrammar00title}</a></li>
	   <li><a href="#grammar-1" title="{?TSFgrammar01title}">{?TSFgrammar01title}</a></li>
	   <li><a href="#grammar-2" title="{?TSFgrammar02title}">{?TSFgrammar02title}</a></li>
	   <li><a href="#grammar-3" title="{?TSFgrammar03title}">{?TSFgrammar03title}</a></li>
	   <li><a href="#grammar-4" title="{?TSFgrammar04title}">{?TSFgrammar04title}</a></li>
	   <li><a href="#grammar-5" title="{?TSFgrammar05title}">{?TSFgrammar05title}</a></li>
	   <li><a href="#grammar-6" title="{?TSFgrammar06title}">{?TSFgrammar06title}</a></li>
	   <li><a href="#grammar-7" title="{?TSFgrammar07title}">{?TSFgrammar07title}</a></li>
	   <li><a href="#grammar-8" title="{?TSFgrammar08title}">{?TSFgrammar08title}</a></li>
	   <li><a href="#grammar-9" title="{?TSFgrammar09title}">{?TSFgrammar09title}</a></li>
	   <li><a href="#api-0" title="{?TSFapi00title}">{?TSFapi00title}</a></li>
	   <li>②-1．「TSF --help」「sample/sample_help.tsf」コマンド一覧表示。</li>
	   <li>②-2．「TSF --helloworld」「sample/sample_helloworld.tsf」TSFのハローワールドサンプル。</li>
	   <li>③-0．「TSF_Io.d」「TSF_Io.py」のAPI一覧<。/li>
	   <li>③-1．「TSF_Io.d」「TSF_Io.py」のRPN電卓の解説。</li>
	   <li>④-0．「TSF_Forth.d」「TSF_Forth.py」の#関数カード一覧。</li>
	   <li>④-1．「TSF_Forth.d」「TSF_Forth.py」のAPI一覧。</li>
	   <li>⑤-0．「TSF_Shuffle.d」「TSF_Shuffle.py」の#関数カード一覧。</li>
	   <li>⑤-1．「TSF_Shuffle.d」「TSF_Shuffle.py」のAPI一覧。</li>
	   <li>⑥-0．「TSF_Calc.d」「TSF_Calc.py」の#関数カード一覧。</li>
	   <li>⑥-1．「TSF_Calc.d」「TSF_Calc.py」のAPI一覧。</li>
	   <li>⑥-2．「TSF_Time.d」「TSF_Time.py」の電卓フォーマットの解説。</li>
	   <li>⑦-0．「TSF_Time.d」「TSF_Time.py」の#関数カード一覧。</li>
	   <li>⑦-1．「TSF_Time.d」「TSF_Time.py」のAPI一覧。</li>
	   <li>⑦-2．「TSF_Time.d」「TSF_Time.py」の日時フォーマットの解説。</li>
	   <li>⑧-0．「TSF_Urlpath.d」「TSF_Urlpath.py」の#関数カード一覧。</li>
	   <li>⑧-1．「TSF_Urlpath.d」「TSF_Urlpath.py」のAPI一覧。</li>
	   <li>⑨-0．「TSF_Match.d」「TSF_Match.py」の#関数カード一覧。</li>
	   <li>⑨-1．「TSF_Match.d」「TSF_Match.py」のAPI一覧。</li>
	   <li>⑩-0．「TSF_Trans.d」「TSF_Urlpath.py」の#関数カード一覧。</li>
	   <li>⑩-1．「TSF_Trans.d」「TSF_Urlpath.py」のAPI一覧。</li>
	   <li>{?TSFfaq00title}</li>
#!	   <li><a href="#faq-0" title="{?TSFfaq00title}">{?TSFfaq00title}</a></li>
	   <li><a href="#address-0" title="{?TSFaddress00title}">{?TSFaddress00title}</a></li>
	  </ul>
	 </section>
	{?TSFlicense00}
	  <p>
	   ※D言語もしくはPythonがインストールされているものとします(Linuxの場合Python2系が最初から入ってる場合があります)。<br>
	  </p>
	  <dl><dt>Downloads - D Programming Language</dt><dd><a href="http://choosealicense.com/licenses/mit/" title="Downloads - D Programming Language">https://dlang.org/download.html</a></dd></dl>
	  <dl><dt>Python Release Python 3.4.4 | Python.org</dt><dd><a href="https://www.python.org/downloads/release/python-344/" title="Python Release Python 3.4.4 | Python.org">https://www.python.org/downloads/release/python-344/</a></dd></dl>
	  <p>
	   ※Puppy Linux以外のOSでも動作すると思いますが開発環境関連リンクも併記。<br>
	  </p>
	  <dl><dt>Puppy Linux Home</dt><dd><a href="http://puppylinux.com/" title="Puppy Linux Home">http://puppylinux.com/</a></dd></dl>
	  <dl><dt>Portable Wine</dt><dd><a href="http://shinobar.server-on.net/puppy/opt/wine-portable-HELP_ja.html" title="Portable Wine">http://shinobar.server-on.net/puppy/opt/wine-portable-HELP_ja.html</a></dd></dl>
	 </section>
	{?TSFlicense02}
	  <p>
	   D言語の環境が用意できる場合「<a href="https://github.com/ooblog/TSF2KEV/blob/master/TSF_DMDcompile.sh" title="TSF2KEV/TSF_DMDcompile.sh at master · ooblog/TSF2KEV">TSF_DMDcompile.sh</a>」のように「TSF」の実行バイナリがコンパイルできます。<br>
	  </p>
	   {?CODE}
	   dmd TSF.d TSF_Io.d TSF_Forth.d TSF_Shuffle.d TSF_Calc.d TSF_Time.d TSF_Urlpath.d TSF_Match.d TSF_Trans.d
	   {?/CODE}
	  <p>
	   実行バイナリ「TSF」を環境変数「$PATH」が通るフォルダ(例えばPuppyLinuxの場合「/root/my-applications/bin/TSF」など)にコピーするとLinuxの場合「*.tsf」が実行できるようになるはずです。<br>
	  </p>
	  <dl><dt>env - Wikipedia</dt><dd><a href="https://ja.wikipedia.org/wiki/Env" title="env - Wikipedia">https://ja.wikipedia.org/wiki/Env</a></dd></dl>
	  <dl><dt>シバン (Unix) - Wikipedia</dt><dd><a href="https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%90%E3%83%B3_(Unix)" title="シバン (Unix) - Wikipedia">https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%90%E3%83%B3_(Unix)</a></dd></dl>
	 </section>
	 <section>
	  <h2 id="License-3">{?TSFlicense03title}</h2>
	  <p>
	   未実装の#関数カードや#関数カード内の未実装な機能などが存在します。<br>
	  </p>
	  <ul>
	   <li>「#TSF_calender」でISO週番号や徹夜日時などが未実装。「TSF_Time」モジュールでタイマー系が未実装。</li>
	   <li>「TSF_Calc」モジュールで分数の小数変換機能細かい版が未実装(RPN経由で高速に近似を求める事は可能)。</li>
	   <li>「TSF_Shuffle」モジュールPPPP関連で「C」「V」「A」「Q」「I」「R」「H」「L」副詞が未実装。</li>
	   <li>「TSF_Match」モジュールで「C」「V」「R」副詞が未実装。「count」動詞が未実装。</li>
	  </ul>
	  <p>
	   言語仕様が固まってない＆特にTSF_Matchモジュールで愚直にすべての関数を作ると時間がかかりすぎる＆kan5x5.woffフォントも未完成。なので、フレーバーテキスト風に#関数カードの仕様が書かれたカード画像を数を揃えて用意する演出は頓挫。<br>
	  </p>
	 </section>
	 <section>
	  <h2 id="grammar-0">{?TSFgrammar00title}</h2>
	  <p>
	   <img src="cardimg/TSF176x250.png" width="176" height="250" class="TSFcard" alt="「TSF_Tab-Separated-Forth」カードサイズロゴ" title="「TSF_Tab-Separated-Forth」カードサイズロゴ">
	   ForthやTSVのおさらいはwikipediaなどを軽く参考にしてください。<br>
	  </p>
	  <dl><dt>Forth - Wikipedia</dt><dd><a href="https://ja.wikipedia.org/wiki/Forth" title="Forth - Wikipedia">https://ja.wikipedia.org/wiki/Forth</a></dd></dl>
	  <dl><dt>逆ポーランド記法 - Wikipedia</dt><dd><a href="https://ja.wikipedia.org/wiki/%E9%80%86%E3%83%9D%E3%83%BC%E3%83%A9%E3%83%B3%E3%83%89%E8%A8%98%E6%B3%95" title="逆ポーランド記法 - Wikipedia">https://ja.wikipedia.org/wiki/%E9%80%86%E3%83%9D%E3%83%BC%E3%83%A9%E3%83%B3%E3%83%89%E8%A8%98%E6%B3%95</a></dd></dl>
	  <dl><dt>Gforth マニュアル</dt><dd><a href="http://www.h7.dion.ne.jp/~samwyn/forth/gforth/index.html" title="Gforth マニュアル">http://www.h7.dion.ne.jp/~samwyn/forth/gforth/index.html</a></dd></dl>
	  <dl><dt>Comma-Separated Values - Wikipedia</dt><dd><a href="https://ja.wikipedia.org/wiki/Comma-Separated_Values" title="Comma-Separated Values - Wikipedia">https://ja.wikipedia.org/wiki/Comma-Separated_Values</a></dd></dl>
	  <dl><dt>Labeled Tab-separated Values (LTSV)</dt><dd><a href="http://ltsv.org/" title="Labeled Tab-separated Values (LTSV)">http://ltsv.org/</a></dd></dl>
	  <p>
	   TSVにプログラムを搭載(Value→Forth)できるようにしたものがTSFです。<br>
	   TSFはForthも参考にしてますが「csv→tsv→ltsv(HSP)→L:Tsv(BaCon,Python)→TSF(D言語,Python)」みたいな流れなので、<br>
	   間接的にはHSPやPythonの影響を受けてるはずですが、厳密にはプログラミング言語からではなくデータフォーマットからの進化です。<br>
	  </p>
	  <p>
	   Forthでは関数をワードとして定義しますが、TSFにはワードの概念がありません。TSFでは文字列や関数を「カード」と呼称します。<br>
	   カードの束をスタックとして管理し、スタックの集合をデッキと呼称します。<br>
	   #関数カードそのものを作る機能はありません。「#TSF_this」によるスタック呼び出しが関数(組み込みではないワード)呼び出しに該当します。<br>
	  </p>
	 </section>
	 <section>
	  <h2 id="grammar-1">{?TSFgrammar01title}</h2>
	  <p>
	   <img src="cardimg/TSFcard_shebang.png" width="176" height="250" class="TSFcard" alt="「#! /usr/bin/env TSF」カード" title="「#! /usr/bin/env TSF」カード">
	   TSF構文で用いる記号はタブ文字「\t」による区切りと「#!」によるコメントと、スタック名末尾「:」と関数カード先頭の「#」ぐらいです。
	  </p>
	  <dl><dt>「\t(tab)」</dt><dd>カード(文字列)はタブ文字で区切るので、タブ文字を視認しやすいエディタを用いてください。</dd></dl>
	  <dl><dt>「#!(shebang)」</dt><dd>インタプリタ指定「#! /usr/bin/env TSF」を成立させるためにシバン「#!」で始まる行はコメント扱いにして読み飛ばします。</dd></dl>
	  <dl><dt>「:(coron)」</dt><dd>スタック名に必須ではありませんが「#TSF_calc」内でスタック名を扱う際に必要。あとLTSVを読み込む「L」副詞で用いる予定。</dd></dl>
	  <dl><dt>「#(sharp)」</dt><dd>関数カード名にシャープは必須ではありませんが視認性の関係(スタック名との区別)でTSFの関数には頭にシャープ(ハッシュ)を付けてます。</dd></dl>
	  <p>
	   行頭がシバン「#!」の場合はコメント扱いです。<br>
	   行頭がタブ文字「\t」の場合はスタックを構成するカード束です。<br>
	   行頭がタブ文字「\t」でもシバン「#!」でもない場合はスタック名の宣言です。スタック名宣言とスタック構成カード束とをまとまて一行で記述(ワンライナー)する事も可能です。<br>
	   行頭がシャープ「#」すなわちシャープ付きのスタック名は非推奨ですが、漢直関連でシャープ一文字のスタック名「#」を必要とするので禁止はされてません(#関数カードとの衝突には注意)。<br>
	  </p>
	  <p>
	   つまりコメントを除くとTSF構文にはタブ区切りと改行しか存在しないので、構文としての括弧はありません。<br>
	   TSF構文そのものに括弧はありませんが、#関数カード「#TSF_calc」内の演算で括弧が使えます(「#TSF_RPN」はRPNなので括弧を使いません)。<br>
	  </p>
	 </section>
	 <section>
	  <h2 id="grammar-2">{?TSFgrammar02title}</h2>
	  <p>
	   TSFは文字列リストを格納する連想配列(デッキ)でメモリを管理する形になるので、整数も小数も分数もbool値も文字列(カード)になります。<br>
	   #関数カード(「#TSF_calc」「#TSF_RPN」など)の演算結果をthatスタックに積み上げるそれを変数に代入と呼ぶかは微妙です。<br>
	   「#TSF_calc」でスタックをリスト(配列)に見立てる場合には「#TSF_join[]」を経由せずに式に組み込む事は可能です。<br>
	  </p>
	  <p>
	   スタックを変数に「喩える」ならば、全てがグローバル変数みたいなものなので、衝突のデメリットとどこからでも呼び出せるメリットがあります。<br>
	   いわゆるenumやconstやimmutableに該当する束縛系の機能もない(なぜなら変数が存在しない)ので、スタック名の衝突には注意。<br>
	  </p>
	 </section>
	 <section>
	  <h2 id="grammar-3">{?TSFgrammar03title}</h2>
	  <p>
	   複数の値を受けとるために構造体やタプル型やクラスなどを用意する必要はありません。変数が存在しないように関数にも帰り値が存在しません。<br>
	   #関数カードやスタックは値を文字列カードとしてthatスタックに積む(場合がある)だけです(便宜上「リターン」と呼称します)。<br>
	  </p>
	 </section>
	 <section>
	  <h2 id="grammar-4">{?TSFgrammar04title}</h2>
	  <p>
	   関数に帰り値が無いのだから、関数内でエラーが発生した場合エラーコードがthatスタックに積まれるのかと言えば、そんな事もありません。<br>
	   TSFの実装ミスか何かでD言語やPythonレベルのエラーは起こりうると思いますが、TSFの#関数カード自体にエラーコードの概念は基本的にはありません。<br>
	   例えば「#TSF_readtext」でファイルの読込に失敗しても、文字列長0のファイルを読み込んだ扱いになります。<br>
	   「#TSF_calc」や「#TSF_RPN」でゼロで割るような事が発生した場合、「n|0」が「リターン」されるだけです。「n|0」の解釈は#関数カード毎の判断によります。<br>
	   例えば「n|0」を「#TSF_echoN」に渡す場合、0行出力の扱いになりますが、「n|0」をゼロとみなしてるのではなく「数値ではない」と判断された流れです。<br>
	   thisスタックを数え終わるまたはスタック破棄および「#TSF_countmax」で指定した上限(初期値256)などのオーバーフロー発生は単にスタックの終了扱いになるのでスタックを抜けます。<br>
	   存在しないスタックのpeekや0枚スタックへのpullその他「ドロー」などのアンダーフローでも長さ0の文字列を受けとるだけでエラーは回避されるはずです。<br>
	   つまり、プログラムが止まるような構文エラーや演算エラーそのものが発生しない以上、catchする事ができないのでcatch構文もありません。<br>
	  </p>
	 </section>
	 <section>
	  <h2 id="grammar-5">{?TSFgrammar05title}</h2>
	  <p>
	   thisスタック(実行中)のスタック自身を呼ぶ場合はコールスタックに積まずに再度実行されるので、末尾再帰ループとなります。<br>
	   同様にコールスタックに存在するスタック名を呼び出すとその階層までのスタック名が破棄されます(同名スタックはコールスタックに積まない)のでループとなります。<br>
	   TSFではコールスタックを直接編集する#関数カードはありません。ループ(再帰)を用いる場合は脱出用の分岐「#exit:」等もセットで用意してください。<br>
	  </p>
	 </section>
	 <section>
	  <h2 id="grammar-6">{?TSFgrammar06title}</h2>
	  <p>
	  単純な分岐なら「0Z~True:~False: #TSF_calc #TSF_this」のような感じで「#TSF_calc」の比較演算子の計算結果にスタック名を選択する荒技があります(「#TSF_RPN」では使用不可)。<br>
	  case文の真似をする場合「switch cases: funcs: #TSF_casesQON #TSF_this」のような感じで「#TSF_casesQON」などを用いてスタック名を選択する方法もあります。<br>
	  他にも「funcs: [cases:0] #TSF_calc #TSF_peekMthe #TSF_this」のような感じでpeek系の関数を用いてスタック名を選択する方法もあります。<br>
	  </p>
	 </section>
	 <section>
	  <h2 id="grammar-7">{?TSFgrammar07title}</h2>
	  <dl><dt>thisスタック(実行中スタック)</dt>
	  <dd>
	   「this」は実行中のスタック。#関数カードであればthatスタックからカードを「ドロー(積み下ろし)」してthatスタックに「リターン(積み上げ)」したりする。<br>
	   文字列カードであれば単純にthatスタックに積み上げる。<br>
	   thisスタックを数え終わる、もしくは途中でthisスタック目減りなど「オーバーフロー」が発生したらスタックから抜ける。<br>
	   「#exit: #TSF_this」のように存在しないスタックに入る行為でもオーバーフロー扱い。<br>
	  </dd></dl>
	  <dl><dt>thatスタック(積込先スタック)</dt>
	  <dd>
	   「that」は積込先スタック。#関数カードの返り値などが積み上げられる。<br>
	   thisスタックとthatスタックが同じ場合、文字列カードが無限に積み重なる状況が発生する場合があり、それは「ハウリング」と呼称します。<br>
	   ハウリング対策でthisスタック数え上げ上限を「#TSF_countmax」で指定できます。初期値は256です。<br>
	  </dd></dl>
	  <dl><dt>theスタック(指定スタック)</dt>
	  <dd>
	   「the」は指定スタック。#関数カードで特定のスタックを指定する場合の代名詞(theは厳密には冠詞だが便宜上代名詞扱い)。<br>
	  </dd></dl>
	  <dl><dt>theyスタック(スタック名一覧)</dt>
	  <dd>
	   「they」はスタック名一覧。「デッキ」のスタック名一覧自体をカード束としてスタックの様に扱う場合がある。<br>
	   「#TSF_pullNthey」などでスタックの消去。<br>
	  </dd></dl>
	 </section>
	 <section>
	  <h2 id="grammar-8">{?TSFgrammar08title}</h2>
	  <dl><dt>peek</dt>
	  <dd>
	  </dd></dl>
	  <dl><dt>poke</dt>
	  <dd>
	  </dd></dl>
	  <dl><dt>pull</dt>
	  <dd>
	  </dd></dl>
	  <dl><dt>push</dt>
	  <dd>
	  </dd></dl>
	 </section>
	 <section>
	  <h2 id="grammar-9">{?TSFgrammar09title}</h2>
	  <p>
	  </p>
	 </section>
	 <section>
	  <h2 id="api-0">{?TSFapi00title}</h2>{@TSF_main}
	 </section>
	 <section>
	  <h2 id="faq-0">{?TSFfaq00title}</h2>
	  <dl><dt>
	   Ｑ．ローカル変数とか無いのですか？<br>
	  </dt><dd>
	   Ａ．そもそもTSFに変数はありませんが、強いて喩えるなら全てグローバル変数みたいなものなので、その場しのぎのネーミングは衝突の恐れです。<br>
	   もう少し喩えるなら他のプログラミング言語でも関数名の衝突には気を付けるはずです。TSFでは関数と変数の区別も無いので、マージしたスクリプトから変数を直接呼び出せるメリットと衝突のデメリットが存在します。<br>
	  </dd></dl>
	 </section>
	
{$TSFsection_404}
	  <ul>
	   <li><a href="index.html"><img src="TSF2KEV_icon.png" width="48" height="48" alt="TSF2KEV" title="TSF2KEV">{$TITLE_index}</a></li>
	   <li><a href="TSFdoc.html"><img src="TSFdoc_icon.png" width="48" height="48" alt="TSFdoc" title="TSFdoc">{$TITLE_TSFdoc}</a></li>
	   <li><a href="KEV2.html"><img src="KEV2_icon.png" width="48" height="48" alt="KEV2" title="KEV2">{$TITLE_KEV2}</a></li>
	  </ul>
	 </section>
{$TSFsection_TSFdoc}
	  <ul>
	   <li><a href="#License-0" title="{?TSFlicense00title}">{?TSFlicense00title}</a></li>
	   <li><a href="#License-1" title="{?TSFlicense01title}">{?TSFlicense01title}</a></li>
	   <li><a href="#License-2" title="{?TSFlicense02title}">{?TSFlicense02title}</a></li>
	   <li><a href="#License-3" title="{?TSFlicense03title}">{?TSFlicense03title}</a></li>
	   <li>①-0．「TSFdoc」の使い方。</li>
	   <li>①-1．「TSFdoc」で必要になるスタックと上書きしてはいけないスタック。</li>
	   <li>①-2．「TSFdoc」の文法っぽい慣習。</li>
	   <li><a href="#faq-0" title="{?TSFfaq00title}">{?TSFfaq00title}</a></li>
	   <li><a href="#address-0" title="{?TSFaddress00title}">{?TSFaddress00title}</a></li>
	  </ul>
	 </section>
	{?TSFlicense00}
	  <p>
	   ※TSFdocはTSFの一部として組み込まれています。<br>
	  </p>
	  <dl><dt>「TSF2KEV」はプログラミング言語「TSF_Tab-Separated-Forth」のD言語とPythonによる実装です。</dt><dd><a href="https://ooblog.github.io/TSF2KEV/index.html" title="「TSF2KEV」はプログラミング言語「TSF_Tab-Separated-Forth」のD言語とPythonによる実装です。">https://ooblog.github.io/TSF2KEV/index.html</a></dd></dl>
	 </section>
	{?TSFlicense02}
	 </section>
	 <section>
	  <h2 id="License-3">{?TSFlicense03title}</h2>
	  <p>
	   ソースコードから関数一覧とコメントを抽出してAPI一覧を生成する機能がまだ未実装です。<br>
	  </p>
	 </section>
	 <section>
	  <h2 id="faq-0">{?TSFfaq00title}</h2>
	  <dl><dt>
	   Ｑ．「TSFimport_regex:」で正規表現を使う箇所があるのですがD言語とPythonで正規表現の違いがあると挙動が変わりませんか？<br>
	  </dt><dd>
	   Ａ．いちいち確認はしませんが、実装言語毎に挙動は変わるはずです。TSF側で正規表現そのものを作り直すなどの徒労は行わないので注意。<br>
	  </dd></dl>
	 </section>
{$TSFsection_KEV2}
	  <ul>
	   <li><a href="#License-0" title="{?TSFlicense00title}">{?TSFlicense00title}</a></li>
	   <li><a href="#License-1" title="{?TSFlicense01title}">{?TSFlicense01title}</a></li>
	   <li><a href="#License-2" title="{?TSFlicense02title}">{?TSFlicense02title}</a></li>
	   <li><a href="#License-3" title="{?TSFlicense03title}">{?TSFlicense03title}</a></li>
	   <li>①-0．「KEV2」の使い方概要。漢字変換と漢直入力の違いや単漢字検索などの解説。</li>
	   <li>①-1．「KEV2」がVimを拡張する操作(マッピング)</li>
	   <li>①-2．「KEV2」がVimに追加するメニュー</li>
	   <li>②-0．漢字配列の解説。</li>
	   <li>②-1．都道府県国名などの字引。</li>
#!	   <li><a href="#faq-0" title="{?TSFfaq00title}">{?TSFfaq00title}</a></li>
	   <li>{?TSFfaq00title}</li>
	   <li><a href="#address-0" title="{?TSFaddress00title}">{?TSFaddress00title}</a></li>
	  </ul>
	 </section>
	{?TSFlicense00}
	  <p>
	   ※Vimが別途インストールされているものとします(Vimのバージョン等は環境毎に差異があります)。<br>
	  </p>
	  <dl><dt>Ubuntu – trusty の vim-gtk パッケージに関する詳細</dt><dd><a href="https://packages.ubuntu.com/trusty/vim-gtk" title="Ubuntu – trusty の vim-gtk パッケージに関する詳細">https://packages.ubuntu.com/trusty/vim-gtk</a></dd></dl>
	  <dl><dt>Vim — KaoriYa</dt><dd><a href="https://www.kaoriya.net/software/vim/](https://www.kaoriya.net/software/vim/" title="Vim — KaoriYa">https://www.kaoriya.net/software/vim/](https://www.kaoriya.net/software/vim/</a></dd></dl>
	 </section>
	{?TSFlicense02}
	 </section>
	 <section>
	  <h2 id="License-3">{?TSFlicense03title}</h2>
	  <p>
	   現在「<a href="https://github.com/ooblog/TSF2KEV/blob/master/KEV2/kanmap.tsf" title="TSF2KEV/kanmap.tsf at master · ooblog/TSF2KEV">KEV2/kanmap.tsf</a>」などを編集するツールがないので直接Vimなどのテキストエディタで編集する形になります。<br>
	   漢直の配列や辞書やフォントの強化は「<a href="https://ooblog.github.io/TSF2KEV/index.html" title="「TSF2KEV」はプログラミング言語「TSF_Tab-Separated-Forth」のD言語とPythonによる実装です。">TSF</a>」にてGUIが実装されるまで先延ばしになります。<br>
	  </p>
	  <p>
	   辞書の内容が正しい事なんて保証されないので注意。謝罪も賠償も配慮も便宜も忖度もありません。<br>
	  </p>
	 </section>
{?TSFlicense00title}
	⓪-0．ライセンスの解説など
{?TSFlicense00}
	{$TSFlicense00}
{$TSFlicense00}
	 <section>
	  <h2 id="License-0">{?TSFlicense00title}</h2>
	   <p>※「MIT License」準拠。<br></p>
	   <dl><dt>MIT License - Choose a License</dt><dd><a href="http://choosealicense.com/licenses/mit/" title="MIT License - Choose a License">http://choosealicense.com/licenses/mit/</a></dd></dl>
	   <dl><dt>licenses/MIT_license - Open Source Group Japan Wiki - Open Source Group Japan - OSDN</dt><dd><a href="https://ja.osdn.net/projects/opensource/wiki/licenses%2FMIT_license" title="licenses/MIT_license - Open Source Group Japan Wiki - Open Source Group Japan - OSDN">https://ja.osdn.net/projects/opensource/wiki/licenses%2FMIT_license</a></dd></dl>
	   <dl><dt>MITライセンスを1行1行読んでいく | プログラミング | POSTD</dt><dd><a href="http://postd.cc/mit-license-line-by-line/" title="MITライセンスを1行1行読んでいく | プログラミング | POSTD">http://postd.cc/mit-license-line-by-line/</a></dd></dl>
	 </section>
	 <section>
	  <h2 id="License-0">{?TSFlicense01title}</h2>
	  <p>
	  「Tahrpup6.0.5,Python2.7.6,dmd2.074.0,vim.gtk7.4.52(vim-gtk)」および<br>
	  「Wine1.7.18,Python3.4.4,dmd2.074.0,gvim8.0.134(KaoriYa)」で開発中。<br> 
	  </p>
{?TSFlicense01title}
	⓪-1．動作環境
{?TSFlicense02title}
	⓪-2．インストール/アンインストール＆セットアップ
{?TSFlicense02}
	{$TSFlicense02}
{$TSFlicense02}
	 <section>
	  <h2 id="License-2">{?TSFlicense02title}</h2>
	   <p>
	    gitでリポジトリ「https://github.com/ooblog/TSF2KEV.git」を「Clone」するか、<br>
	    「https://github.com/ooblog/TSF2KEV/archive/master.zip」を「Download ZIP」して展開すると、<br>
	    「TSF2KEV」フォルダが作成されます。<br>
	   </p>
	   <dl><dt>プログラミング言語「TSF_Tab-Separated-Forth」開発中。</dt><dd><a href="https://github.com/ooblog/TSF2KEV" title="プログラミング言語「TSF_Tab-Separated-Forth」開発中。">https://github.com/ooblog/TSF2KEV</a></dd></dl>
	   <p>
	    VimでTSFを編集する場合は「<a href="https://github.com/ooblog/TSF2KEV/blob/master/vimsyntax/tsf.vim" title="TSF2KEV/tsf.vim at master · ooblog/TSF2KEV">vimsyntax/tsf.vim</a>」を「~/.vim/syntax/tsf.vim」にコピー。<br>
	    VimでKEVを用いた漢直入力などをする場合は「メニュー→編集(E)→起動時の設定(S)」で「&#126;/.vimrc」を開いて「filetype=tsf」や「:!TSF %」を追記。<br>
	   </p>
	   {?CODE}
	   syntax on
	   au BufRead,BufNewFile *.tsf set filetype=tsf
	   autocmd BufNewFile,BufRead *.tsf nnoremap {?&lt}F5{?&gt} :!TSF %{?&lt}CR{?&gt}
	   command KEV2tsf  :source &#126;/TSF2KEV/KEV2/kanedit.vim
	   {?/CODE}
	  <p>
	   Vimエディタでの設定が成功するとシンタックスが着色されるはずです。<br>
	   <img src="TSF_512x384.png" alt="TSF syntax image" title="TSFのシンタックス" width="512" height="384"><br>
	  </p>
{?TSFlicense03title}
	⓪-3．その他現在わかっている不具合や今後の課題などソフト使用の補足ガイドライン
{?TSFbodyfooter}
	{$TSFbodyfooter}
{$TSFbodyfooter}
	<section>
	 <h2 id="address-0">{?TSFaddress00title}</h2>
	 <p>
	  更新情報はGitHubやブログを確認してください。<br>
	 </p>
	 <dl><dt>ooblog/TSF2KEV(GitHub)</dt><dd><a href="https://github.com/ooblog/TSF2KEV" title="ooblog/TSF2KEV(GitHub)">https://github.com/ooblog/TSF2KEV</a></dd></dl>
	 <dl><dt>[TSF] - 大風呂ダ敷</dt><dd><a href="http://d.hatena.ne.jp/ooblog/searchdiary?word=*[TSF]" title="[TSF] - 大風呂ダ敷">http://d.hatena.ne.jp/ooblog/searchdiary?word=*[TSF]</a></dd></dl>
	 <dl><dt>[kanedit] - 大風呂ダ敷</dt><dd><a href="http://d.hatena.ne.jp/ooblog/searchdiary?word=*[kanedit]" title="[kanedit] - 大風呂ダ敷">http://d.hatena.ne.jp/ooblog/searchdiary?word=*[kanedit]</a></dd></dl>
	</section>
	
	<div class="gotop"><a href="#top">↑Top</a></div>
	<footer>
	 <p>site generator "<a href="https://github.com/ooblog/TSF2KEV/blob/master/sample/TSFdoc.tsf" title="TSF2KEV/TSFdoc.tsf at master · ooblog/TSF2KEV">TSFdoc.tsf</a>" repository：<a href="https://github.com/ooblog/TSF2KEV" title="ooblog/TSF2KEV: プログラミング言語「TSF_Tab-Separated-Forth」開発中。">https://github.com/ooblog/TSF2KEV</a></p>
	 <p class="ooblog">
	  #! -- Copyright (c) 2017 ooblog --<br>
	  #! License: MIT　<a href="https://github.com/ooblog/TSF2KEV/blob/master/LICENSE" title="TSF2KEV/LICENSE at master · ooblog/TSF2KEV">https://github.com/ooblog/TSF2KEV/blob/master/LICENSE</a><br>
	 </p>
	</footer>
{?TSFhtmlfooter}
	{$TSFhtmlfooter}
{$TSFhtmlfooter}
	
	</body></html>
{?TITLE}
	{$TITLE_index}	{$TITLE_404}	{$TITLE_TSFdoc}	{$TITLE_KEV2}
{$TITLE_index}
	「TSF2KEV」はプログラミング言語「TSF_Tab-Separated-Forth」のD言語とPythonによる実装です。
{$TITLE_404}
	TSF2KEVサイトマップ(404)
{$TITLE_TSFdoc}
	「TSFdoc」は「TSF2KEV」を用いたドキュメントジェネレーターです。
{$TITLE_KEV2}
	「KEV」はVimスクリプトでできてる漢字直接入力です(単漢字検索含む)。
{?TSFicon}
	{$TSFicon_index}		{$TSFicon_TSFdoc}	{$TSFicon_KEV2}
{$TSFicon_index}
	<img src="TSF2KEV_icon.png" width="48" height="48" alt="TSF2KEV" title="TSF2KEV">
{$TSFicon_TSFdoc}
	<img src="TSFdoc_icon.png" width="48" height="48" alt="TSFdoc" title="TSFdoc">
{$TSFicon_KEV2}
	<img src="KEV2_icon.png" width="48" height="48" alt="KEV2" title="KEV2">
{?TSFaddress00title}
	{$TSFaddress00_index}		{$TSFaddress00_TSFdoc}	{$TSFaddress00_KEV2}
{$TSFaddress00_index}
	⑫-0．作者について、例えば連絡先。
{$TSFaddress00_TSFdoc}
	③-0．作者について、例えば連絡先。
{$TSFaddress00_KEV2}
	④-0．作者について、例えば連絡先。
{?TSFfaq00title}
	{$TSFfaq00_index}		{$TSFfaq00_TSFdoc}	{$TSFfaq00_KEV2}
{$TSFfaq00_index}
	⑪-0．「TSF」のＦＡＱ。
{$TSFfaq00_TSFdoc}
	②-0．「TSFdoc」のＦＡＱ。
{$TSFfaq00_KEV2}
	③-0．「KEV2」のＦＡＱ。
{?TSFgrammar00title}
	①-0．TSFとForthとの差異(ワードをカードと呼ぶ)など。
{?TSFgrammar01title}
	①-1．TSF構文には括弧が存在しません(式では括弧が使えます)。
{?TSFgrammar02title}
	①-2．TSFには変数の型どころか代入したり束縛したりするような変数自体が存在しません。
{?TSFgrammar03title}
	①-3．TSFには関数の返り値やreturn文が存在しません。return用にタプルを用意するなどの概念もありません。
{?TSFgrammar04title}
	①-4．TSFにはtry/catch文が存在しません。ゼロで割った場合などの時は「n|0」が発生します。
{?TSFgrammar05title}
	①-5．TSFにはfor文やwhile文が無いので再帰がループです。
{?TSFgrammar06title}
	①-6．TSFにはif/else文やswitch/case文が無いので分岐は式(比較演算子)などを用います。
{?TSFgrammar07title}
	①-7．スタック代名詞4つの「th」、this,that,the,theyとハウリングについて。
{?TSFgrammar08title}
	①-8．カードシャッフル動詞4つの「p」、peek,poke,pull,pushとドロー＆リターンについて。
{?TSFgrammar09title}
	①-9．カード選択位置の副詞「FNCMVAQIRHL」と多重副詞「SDO」ついて。
{?TSFapi00title}
	②-0．「TSF.d」「TSF.py」のAPI一覧(コマンド一覧含む)。
{?CODE}
	<pre><code>
{?/CODE}
	</code></pre>
{?INDENT}
	    	
{?TAB}
	@T
{?NL}
	@E
{?&lt}
	&lt;
{?&gt}
	&gt;
{?MODIFY}
	@Tmodify:@4y@0m@0dm@wdec@0h@0n@0s

#! -- Copyright (c) 2017 ooblog --
#! License: MIT　https://github.com/ooblog/TSF2KEV/blob/master/LICENSE
