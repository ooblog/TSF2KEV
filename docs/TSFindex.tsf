#! /usr/bin/env TSF
TSF_Tab-Separated-Forth:
	../docs/TSFindex.tsf	../sample/TSFdoc.tsf	2	#!TSF_runagainN	#!TSF_fin.
TSFdocs_files:
	../docs/index.html	../docs/forth.html	../docs/404.html	../docs/TSFdoc.html	../docs/KEV2.html
TSFdocs_basedocs:
	TSF_html:	TSF_html:	TSF_html:	TSF_html:	TSF_html:
TSF_html:
	{?TSFhtmlheader}{?TSFbodyheader}{?TSFsections}{?TSFbodyfooter}{?TSFhtmlfooter}
TSFdocs_imports:
	../TSF.d	../TSF_Io.d	../TSF_Forth.d
{@TSF_main}
	../TSF.d
{@TSF_Io}
	../TSF_Io.d
{@TSF_Forth}
	../TSF_Forth.d
TSFimport_ext:
	.py	.d
TSFimport_regex:
	regex_Python:	regex_D:	regex_none:
regex_Python:
	regexPython_reg:	regexPython_txt:	#!TSF_replacesRSN
regexPython_reg:
	^(?!def).+$	^\n	def 	@NL	^@dddt	$
	@DLDT	:[ /]+#[a-zA-Z]+:	@dddt
regexPython_txt:
			@NL@DLDT	@dddt{?NL}		@dddt
	   <dl><dt>	</dt><dd>	</dd></dl>
regex_D:
	regexD_reg:	regexD_txt:	#!TSF_replacesRSN
regexD_reg:
	^void	^long\[\]	^long	^real\[\]	^real	^string\[\]	^string
	^(?!def).+$	^(?!.*(\)\{)).*$	^\n	def 	@NL	^@dddt	$	\)\{
	@DLDT	:[ /]+#[a-zA-Z]+:	@dddt
regexD_txt:
	def void	def long[]	def long	def real[]	def real	def string[]	def string
				@NL@DLDT	@dddt{?NL}		@dddt	):
	   <dl><dt>	</dt><dd>	</dd></dl>
regex_none:
	#!TSF_pullFthat
TSFdocs_tags:
	{?MODIFY}	{?TAB}	{?NL}	{?INDENT}	{?BR}	{?/CODE}	{?CODE}
	{@TSF_Forth}	{@TSF_Io}	{@TSF_main}
	{?TSFaddress00title}
	{?TSFfaq01forth}	{?TSFfaq00index}
	{?TSFforth00title}
	{?TSFIo01title}	{?TSFIo00title}	{?TSFshell00title}
	{?TSFgrammar09title}	{?TSFgrammar08title}	{?TSFgrammar07title}	{?TSFgrammar06title}	{?TSFgrammar05title}	{?TSFgrammar04title}	{?TSFgrammar03title}	{?TSFgrammar02title}	{?TSFgrammar01title}	{?TSFgrammar00title}
	{?TSFlicense03title}	{?TSFlicense02title}	{?TSFlicense02}	{?TSFlicense01title}	{?TSFlicense00title}	{?TSFlicense00}
	{$TITLE_TSFindex}	{$TITLE_404}	{$TITLE_TSFdoc}	{$TITLE_KEV2}	{?TITLE}
	{$TSFicon_TSFindex}	{$TSFicon_TSFdoc}	{$TSFicon_KEV2}	{?TSFicon}	{?TSFpages}	{?TSFasideicons}
	{?TSFhtmlheader}	{?TSFbodyheader}	{?TSFsections}	{?TSFbodyfooter}	{?TSFhtmlfooter}
{?TSFhtmlheader}
	{$TSFhtmlheader}
{$TSFhtmlheader}
	<html lang="ja"><head>
	 <meta charset="UTF-8" />
	 <title>{?TITLE}</title>
	 <link rel="stylesheet" type="text/css" href="TSFdoc.css" />
	 <link rel="icon" type="image/png" href="TSF2KEV_icon.png" />
	</head><body>
	
{?TSFbodyheader}
	{$TSFasideindex}	{$TSFasideindex}	{$TSFaside404}	{$TSFasideindex}	{$TSFasideindex}
{$TSFasideindex}
	 <header><nav>
	  <div class="yonmoji_root"><a href="https://ooblog.github.io/" rel="publisher" title="「約四文字」(http://ooblog.github.io/)">約四<br /></a><a href="https://ooblog.github.io/" rel="publisher" title="「約四文字」(http://ooblog.github.io/)">文字</a></div>
	  <span> &#62; <a href="https://ooblog.github.io/TSF.html" title="TSV - 「約四文字」(http://ooblog.github.io/)">TSF</a> &#62; <mark class="applogo">{?TSFicon}</mark></span> <span class="yonmoji_sitemap"><a href="404.html" title="{$TITLE_404}">{$TITLE_404}</a></span>
	  <br class="yonmoji_both" />
	 </div></header>
	{?TSFasideicons}
{$TSFaside404}
	 <header><nav>
	  <div class="yonmoji_root"><a href="https://ooblog.github.io/" rel="publisher" title="「約四文字」(http://ooblog.github.io/)">約四<br /></a><a href="https://ooblog.github.io/" rel="publisher" title="「約四文字」(http://ooblog.github.io/)">文字</a></div>
	  <span> &#62; <a href="https://ooblog.github.io/TSF.html" title="TSV - 「約四文字」(http://ooblog.github.io/)">TSF</a> &#62; <mark>{$TITLE_404}</mark></span>
	  <br class="yonmoji_both" />
	 </div></header>
	{?TSFasideicons}
{?TSFasideicons}
	{$TSFasideicons}
{$TSFasideicons}
	 <aside class="sidepages"><nav>
	  <ul>
	   <li><a href="index.html">{$TSFicon_TSFindex}</a></li>
	   <li><a href="TSFdoc.html">{$TSFicon_TSFdoc}</a></li>
	   <li><a href="KEV2.html">{$TSFicon_KEV2}</a></li>
	  </ul>
	 </nav></aside>
	 <section class="mainpages">
	  <h1>{?TITLE}</h1>
	  <p>
	   version(branch):20170718T073839{?MODIFY}(執筆途中です)<br>
	  </p>
{?TSFsections}
	{$TSFsection_index}	{$TSFsection_forth}	{$TSFsection_404}	{$TSFsection_TSFdoc}	{$TSFsection_KEV2}
{$TSFsection_index}
	  <ul>
	   <li><a href="#License-0" title="{?TSFlicense00title}">{?TSFlicense00title}</a></li>
	   <li><a href="#License-1" title="{?TSFlicense01title}">{?TSFlicense01title}</a></li>
	   <li><a href="#License-2" title="{?TSFlicense02title}">{?TSFlicense02title}</a></li>
	   <li><a href="#License-3" title="{?TSFlicense03title}">{?TSFlicense03title}</a></li>
	   <li><a href="#grammar-0" title="{?TSFgrammar00title}">{?TSFgrammar00title}</a></li>
	   <li><a href="#grammar-1" title="{?TSFgrammar01title}">{?TSFgrammar01title}</a></li>
	   <li><a href="#grammar-2" title="{?TSFgrammar02title}">{?TSFgrammar02title}</a></li>
	   <li><a href="#grammar-3" title="{?TSFgrammar03title}">{?TSFgrammar03title}</a></li>
	   <li><a href="#grammar-4" title="{?TSFgrammar04title}">{?TSFgrammar04title}</a></li>
	   <li><a href="#grammar-5" title="{?TSFgrammar05title}">{?TSFgrammar05title}</a></li>
	   <li><a href="#grammar-6" title="{?TSFgrammar06title}">{?TSFgrammar06title}</a></li>
	   <li><a href="#grammar-7" title="{?TSFgrammar07title}">{?TSFgrammar07title}</a></li>
	   <li><a href="#grammar-8" title="{?TSFgrammar08title}">{?TSFgrammar08title}</a></li>
	   <li><a href="#grammar-9" title="{?TSFgrammar09title}">{?TSFgrammar09title}</a></li>
	   <li><a href="#‎shell-0" title="{?TSFshell00title}">{?TSFshell00title}</a></li>
	   <li><a href="#Io-0" title="{?TSFIo00title}">{?TSFIo00title}</a></li>
	   <li><a href="#Io-1" title="{?TSFIo01title}">{?TSFIo01title}</a></li>
	   <li><a href="forth.html#forth-0" title="{?TSFforth00title}">{?TSFforth00title}</a></li>
	   <li>⑤-0．「TSF_Calc.d」「TSF_Calc.py」の#関数カード一覧。</li>
	   <li>⑤-1．「TSF_Calc.d」「TSF_Calc.py」のAPI一覧。</li>
	   <li>⑤-2．「TSF_Time.d」「TSF_Time.py」の電卓フォーマットの解説。</li>
	   <li>⑥-0．「TSF_Time.d」「TSF_Time.py」の#関数カード一覧。</li>
	   <li>⑥-1．「TSF_Time.d」「TSF_Time.py」のAPI一覧。</li>
	   <li>⑥-2．「TSF_Time.d」「TSF_Time.py」の日時フォーマットの解説。</li>
	   <li>⑦-0．「TSF_Urlpath.d」「TSF_Urlpath.py」の#関数カード一覧。</li>
	   <li>⑦-1．「TSF_Urlpath.d」「TSF_Urlpath.py」のAPI一覧。</li>
	   <li>⑧-0．「TSF_Match.d」「TSF_Match.py」の#関数カード一覧。</li>
	   <li>⑧-1．「TSF_Match.d」「TSF_Match.py」のAPI一覧。</li>
	   <li>⑨-0．「TSF_Trans.d」「TSF_Urlpath.py」の#関数カード一覧。</li>
	   <li>⑨-1．「TSF_Trans.d」「TSF_Urlpath.py」のAPI一覧。</li>
	   <li><a href="#faq-0" title="{?TSFfaq00index}">{?TSFfaq00index}</a></li>
	   <li><a href="forth.html#faq-1" title="{?TSFfaq01forth}">{?TSFfaq01forth}</a></li>
	   <li><a href="#address-0" title="{?TSFaddress00title}">{?TSFaddress00title}</a></li>
	  </ul>
	 </section>
	{?TSFlicense00}
	  <p>
	   ※D言語もしくはPythonがインストールされているものとします(Linuxの場合Python2系が最初から入ってる場合があります)。<br>
	  </p>
	  <dl><dt>Downloads - D Programming Language</dt><dd><a href="http://choosealicense.com/licenses/mit/" title="Downloads - D Programming Language">https://dlang.org/download.html</a></dd></dl>
	  <dl><dt>Python Release Python 3.4.4 | Python.org</dt><dd><a href="https://www.python.org/downloads/release/python-344/" title="Python Release Python 3.4.4 | Python.org">https://www.python.org/downloads/release/python-344/</a></dd></dl>
	  <p>
	   ※Puppy Linux以外のOSでも動作すると思いますが開発環境関連リンクも併記。<br>
	  </p>
	  <dl><dt>Puppy Linux Home</dt><dd><a href="http://puppylinux.com/" title="Puppy Linux Home">http://puppylinux.com/</a></dd></dl>
	  <dl><dt>Portable Wine</dt><dd><a href="http://shinobar.server-on.net/puppy/opt/wine-portable-HELP_ja.html" title="Portable Wine">http://shinobar.server-on.net/puppy/opt/wine-portable-HELP_ja.html</a></dd></dl>
	 </section>
	{?TSFlicense02}
	  <p>
	   D言語の環境が用意できる場合「<a href="https://github.com/ooblog/TSF2KEV/blob/master/TSF_DMDcompile.sh" title="TSF2KEV/TSF_DMDcompile.sh at master · ooblog/TSF2KEV">TSF_DMDcompile.sh</a>」のように「TSF」の実行バイナリがコンパイルできます。<br>
	  </p>
	   {?CODE}
	   dmd TSF.d TSF_Io.d TSF_Forth.d TSF_Calc.d TSF_Time.d TSF_Urlpath.d TSF_Match.d TSF_Trans.d
	   {?/CODE}
	  <p>
	   実行バイナリ「TSF」を環境変数「$PATH」が通るフォルダ(例えばPuppyLinuxの場合「~/my-applications/bin」など)にコピーすると「*.tsf」が実行できるようになるはずです。<br>
	  </p>
	  <dl><dt>env - Wikipedia</dt><dd><a href="https://ja.wikipedia.org/wiki/Env" title="env - Wikipedia">https://ja.wikipedia.org/wiki/Env</a></dd></dl>
	  <dl><dt>シバン (Unix) - Wikipedia</dt><dd><a href="https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%90%E3%83%B3_(Unix)" title="シバン (Unix) - Wikipedia">https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%90%E3%83%B3_(Unix)</a></dd></dl>
	 </section>
	 <section>
	  <h2 id="License-3">{?TSFlicense03title}</h2>
	  <p>
	   未実装の#関数カードや#関数カード内の未実装な機能などが存在します。<br>
	  </p>
	  <ul>
	   <li>「TSF_Forth」モジュールPPPP関連で「Q」「I」「R」「H」「L」副詞が未実装。</li>
	   <li>「TSF_Time」モジュールでタイマー系が未実装。「#!TSF_calender」でISO週番号や徹夜日時などが未実装。</li>
	   <li>「TSF_Match」モジュールで「C」「V」「R」副詞が未実装。「count」動詞が未実装。</li>
	  </ul>
	  <p>
	   言語仕様が固まってない＆特にTSF_Matchモジュールで愚直にすべての関数を作ると時間がかかりすぎる＆kan5x5.woffフォントも未完成。なので、フレーバーテキスト風に#関数カードの仕様が書かれたカード画像を数を揃えて用意する演出は頓挫。<br>
	  </p>
	 </section>
	 <section>
	  <h2 id="grammar-0">{?TSFgrammar00title}</h2>
	  <p>
	   <img src="cardimg/TSF176x250.png" width="176" height="250" class="TSFcard" alt="「TSF_Tab-Separated-Forth」カードサイズロゴ" title="「TSF_Tab-Separated-Forth」カードサイズロゴ">
	   ForthやTSVのおさらいはwikipediaなどを軽く参考にしてください。<br>
	  </p>
	  <dl><dt>Forth - Wikipedia</dt><dd><a href="https://ja.wikipedia.org/wiki/Forth" title="Forth - Wikipedia">https://ja.wikipedia.org/wiki/Forth</a></dd></dl>
	  <dl><dt>逆ポーランド記法 - Wikipedia</dt><dd><a href="https://ja.wikipedia.org/wiki/%E9%80%86%E3%83%9D%E3%83%BC%E3%83%A9%E3%83%B3%E3%83%89%E8%A8%98%E6%B3%95" title="逆ポーランド記法 - Wikipedia">https://ja.wikipedia.org/wiki/%E9%80%86%E3%83%9D%E3%83%BC%E3%83%A9%E3%83%B3%E3%83%89%E8%A8%98%E6%B3%95</a></dd></dl>
	  <dl><dt>Gforth マニュアル</dt><dd><a href="http://www.h7.dion.ne.jp/~samwyn/forth/gforth/index.html" title="Gforth マニュアル">http://www.h7.dion.ne.jp/~samwyn/forth/gforth/index.html</a></dd></dl>
	  <dl><dt>Comma-Separated Values - Wikipedia</dt><dd><a href="https://ja.wikipedia.org/wiki/Comma-Separated_Values" title="Comma-Separated Values - Wikipedia">https://ja.wikipedia.org/wiki/Comma-Separated_Values</a></dd></dl>
	  <dl><dt>Labeled Tab-separated Values (LTSV)</dt><dd><a href="http://ltsv.org/" title="Labeled Tab-separated Values (LTSV)">http://ltsv.org/</a></dd></dl>
	  <p>
	   TSVにプログラムを搭載(Value→Forth)できるようにしたものがTSFです。<br>
	   TSFはForthも参考にしてますが「csv→tsv→ltsv(HSP)→L:Tsv(BaCon,Python)→TSF(D言語,Python)」みたいな流れなので、<br>
	   間接的にはHSPやPythonの影響を受けてるはずですが、厳密にはプログラミング言語からではなくデータフォーマットからの進化です。<br>
	  </p>
	  <p>
	   Forthでは関数をワードとして定義しますが、TSFにはワードの概念がありません。TSFでは文字列や関数を「カード」と呼称します。<br>
	   カードの束をスタックとして管理し、スタックの集合をデッキと呼称します。<br>
	   #!関数カードそのものを作る機能はありません。「#!TSF_this」によるスタック呼び出しが関数(組み込みではないワード)呼び出しに該当します。<br>
	  </p>
	  <p>
	   文字コードは「UTF-8」改行は「LF」です。<br>
	  </p>
	 </section>
	 <section>
	  <h2 id="grammar-1">{?TSFgrammar01title}</h2>
	  <p>
	   <img src="cardimg/TSFcard_shebang.png" width="176" height="250" class="TSFcard" alt="「#! /usr/bin/env TSF」カード" title="「#! /usr/bin/env TSF」カード">
	   TSF構文で用いる記号はタブ文字「\t」による区切りと「#!」によるコメント(もしくは#!関数カード)と、スタック名末尾(もしくは一部カードに付与するラベル)の「:」ぐらいです。
	  </p>
	  <dl><dt>「\t(tab)」</dt><dd>カード(文字列)はタブ文字で区切るので、タブ文字を視認しやすいエディタを用いてください。<br></dd></dl>
	  <dl><dt>
	   「#!(shebang)」</dt><dd>インタプリタ指定「#! /usr/bin/env TSF」を成立させるためにシバン「#!」で始まる行はコメント扱いにして読み飛ばします。<br>
	   転じて「#!exit:」のような存在しないスタック名を表現する場合にも使用します。<br>
	   #!関数カード名でシバン「#!」には必須では無いのですが、シバンで始まるスタックが簡単には作れない事を応用して、スタック名との区別し易いよう#!関数カード名はシバンから始まります。<br>
	  </dd></dl>
	  <dl><dt>「:(coron)」</dt><dd>スタック名に必須ではありませんが「#!TSF_calc」内で直接スタック名を扱う際に必要。あとLTSVとの互換性で用いる予定。<br></dd></dl>
	  <p>
	   行頭がシバン「#!」の場合(もしくは改行のみの行)はコメント扱いです。<br>
	   行頭がタブ文字「\t」の場合はスタックを構成するカード束です。<br>
	   行頭がタブ文字「\t」でもシバン「#!」でもない場合はスタック名の宣言です。スタック名宣言とスタック構成カード束とをまとまて一行で記述(ワンライナー)する事も可能です。<br>
	  </p>
	  <p>
	   つまりコメントを除くとTSF構文にはタブ区切りと改行しか存在しないので、構文としての括弧はありません。<br>
	   TSF構文そのものに括弧はありませんが、#!関数カード「#!TSF_calc」内の演算で括弧が使えます(「#!TSF_RPN」はRPNなので括弧を使いません)。<br>
	  </p>
	  <p>
	   便宜上「式」と呼んだりしますが、「#!TSF_RPN」も「#!TSF_calc」も「電卓」という概念の方がしっくりくると思います。<br>
	  </p>
	 </section>
	 <section>
	  <h2 id="grammar-2">{?TSFgrammar02title}</h2>
	  <p>
	   TSFは文字列リストを格納する連想配列(デッキ)で管理する形になるので、整数も小数も分数も分母ゼロ「n|0」も文字列(カード)になります。<br>
	   #!関数カード(「#!TSF_calc」「#!TSF_RPN」など)の演算結果をthatスタックに積み上げるそれを変数に代入と呼ぶかは微妙です。<br>
	   「#!TSF_calc」でスタックをリスト(配列)に見立てる場合には「#!TSF_join[]」を経由せずに式に組み込む事は可能です。<br>
	  </p>
	  <p>
	   スタックを変数に「喩える」ならば、全てがグローバル変数みたいなものなので、衝突のデメリットとどこからでも呼び出せるメリットがあります。<br>
	   いわゆるenumやconstやimmutableなど束縛系の機能もない(なぜなら変数が存在しない)ので、スタック名の衝突からの上書きに注意。<br>
	   「#!TSF_mergethe」「#!TSF_runagain」などで複数のTSFデッキをマージできますが、ローカル変数(変数自体が無い)のスコープとかも存在しないので衝突注意。<br>
	  </p>
	 </section>
	 <section>
	  <h2 id="grammar-3">{?TSFgrammar03title}</h2>
	  <p>
	   複数の値を受けとるために構造体やタプル型やクラスなどを用意する必要はありません。変数が存在しないように関数にも帰り値が存在しません。<br>
	   #関数カードやスタックは値を文字列カードとしてthatスタックに積む(場合がある)だけです(便宜上「リターン」と呼称します)。<br>
	   #関数カードが複数の値をリターンする場合や複数の値をドローする場合、個数が付加されてる場合もあります(「#!TSF_argvsthe #!TSF_echoN」を組み合わせるケースなど)。<br>
	  </p>
	 </section>
	 <section>
	  <h2 id="grammar-4">{?TSFgrammar04title}</h2>
	  <p>
	   TSFの実装ミスか何かでD言語やPythonレベルのエラーは起こりうると思いますが、TSFの#関数カード自体にエラーコードの概念は基本的にはありません。<br>
	   例えば「#!TSF_readtext」でファイルの読込に失敗しても、文字列長0のファイルを読み込んだ扱いになります。<br>
	  </p>
	  <p>
	   「#!TSF_calc」や「#!TSF_RPN」でゼロで割るような事が発生した場合、分母ゼロ「n|0」が「リターン」されるだけです。<br>
	   分母ゼロ「n|0」を例えば「#!TSF_echoN」に渡す場合、0行出力の扱いになりますが、「n|0」をゼロとみなしてるのではなく「数値ではない」と判断された流れです。<br>
	   分母ゼロ「n|0」がどう解釈されるかは#!関数カード毎の判断、関数が何をするのかによります。<br>
	  </p>
	  <p>
	   存在しないスタックへの「#!TSF_this」例えば「#!exit: #!TSF_this」を行った場合やthisスタックオーバーフローはスタック終了で抜ける扱いになります。<br>
	   存在しないスタックへのpeekや0枚スタックへのpullその他thatスタックが空の状態でドローなどでアンダーフロー発生でも長さ0の文字列を受けとるだけです。<br>
	   存在しないスタックへのpokeやpushも何もしませんが例外的にFpushだけはスタックを新規生成してカードを格納します。<br>
	  </p>
	  <p>
	   つまり、プログラムが止まるような構文エラーや演算エラーそのものを想定しない以上、catchする事ができないのでcatch構文もありません。<br>
	  </p>
	 </section>
	 <section>
	  <h2 id="grammar-5">{?TSFgrammar05title}</h2>
	  <p>
	   thisスタック(実行中)のスタック自身を呼ぶ場合はコールスタックに積まずに再度実行されるので、末尾再帰ループとなります。<br>
	   同様にコールスタックに存在するスタック名を呼び出すとその階層までのスタック名が破棄されます(同名スタックはコールスタックに積まない)のでループとなります。<br>
	   TSFではコールスタックを直接編集する#関数カードはありません。ループ(再帰)を用いる場合は脱出用の分岐「#!exit:」等もセットで用意してください。<br>
	  </p>
	 </section>
	 <section>
	  <h2 id="grammar-6">{?TSFgrammar06title}</h2>
	  <p>
	  単純な分岐なら「2-1Z~True:~False: #!TSF_calc #!TSF_this」のような感じで「#!TSF_calc」の比較演算子の計算結果にスタック名を選択する荒技があります(「#!TSF_RPN」では式中でのスタック名は使用不可)。<br>
	  TSFには等号・不等号の演算子は存在しません(等号と紛らわしい代入演算子も存在しません)。<br>
	  「2=1~True:~False:」(2と1は等しいか否か)ではなく「2-1Z~True:~False:」(2引く1はゼロか否か)であることに留意してください。
	  </p>
	  <p>
	  case文の真似をする場合「switch cases: funcs: #!TSF_casesQON #!TSF_this」のような感じで「#!TSF_casesQON」などを用いてスタック名を選択する方法もあります。<br>
	  他にも「funcs: [cases:0] #!TSF_calc #!TSF_peekMthe #!TSF_this」のような感じでpeek系の関数を用いてスタック名を選択する方法もあります。<br>
	  </p>
	 </section>
	 <section>
	  <h2 id="grammar-7">{?TSFgrammar07title}</h2>
	  <dl><dt>thisスタック(実行中スタック)</dt>
	  <dd>
	   「this」は実行中のスタック。#関数カードであればthatスタックからカードを「ドロー(積み下ろし)」してthatスタックに「リターン(積み上げ)」したりする。<br>
	   文字列カードであれば単純にthatスタックに積み上げる。<br>
	   thisスタックを数え終わる、もしくは途中でthisスタック目減りなど「オーバーフロー」が発生したらスタックから抜ける。<br>
	   「#!exit: #!TSF_this」のように存在しないスタックに入る行為でもオーバーフロー扱い。<br>
	  </dd></dl>
	  <dl><dt>thatスタック(積込先スタック)</dt>
	  <dd>
	   「that」は積込先スタック。#関数カードの返り値などが積み上げられる。<br>
	   thisスタックとthatスタックが同じ場合、文字列カードが無限に積み重なる状況が発生する場合があり、それは「ハウリング」と呼称します。<br>
	   ハウリング対策でthisスタック数え上げ上限を「#!TSF_countmax」で指定できます。初期値は256です。<br>
	  </dd></dl>
	  <dl><dt>theスタック(指定スタック)</dt>
	  <dd>
	   「the」は指定スタック。#関数カードで特定のスタックを指定する場合の代名詞(theは厳密には冠詞だが便宜上代名詞扱い)。<br>
	  </dd></dl>
	  <dl><dt>theyスタック(スタック名一覧)</dt>
	  <dd>
	   「they」はスタック名一覧。「デッキ」のスタック名一覧自体をカード束としてスタックの様に扱う場合がある。<br>
	   例えば「#!TSF_pullNthey」のスタックの消去は"スタックからカードを一枚引き抜く"表現で"デッキからスタックを一束引き抜く"。<br>
	  </dd></dl>
	 </section>
	 <section>
	  <h2 id="grammar-8">{?TSFgrammar08title}</h2>
	  <p>
	   スタック操作は『4つの「p」』と『4つの「th」』を組み合わせた動作が基本になります (正確にはppppと4thの間に「副詞」が入りますが副詞説明は次項)。<br>
	  <p>
	  <dl><dt>peek(スタック読込)</dt>
	  <dd>
	   スタックからカードを読み込む。読込先スタックはそのままに「that」スタックにカードが積まれるのでカードが増殖る形になる。<br>
	  </dd></dl>
	  <dl><dt>poke(スタック書込)</dt>
	  <dd>
	   スタックにカードを書き込む。スタックのカードは上書きされるので上書きされたカードが消失する形になる。<br>
	  </dd></dl>
	  <dl><dt>pull(スタック引抜)</dt>
	  <dd>
	   スタックからカードを引き抜く。引抜先スタックから「that」スタックにカードが移動する形になる。<br>
	  </dd></dl>
	  <dl><dt>push(スタック差込)</dt>
	  <dd>
	   スタックにカードを差し込む。引抜先スタックに「that」スタックからカードが移動する形になる。<br>
	  </dd></dl>
	  <dl><dt>pullFthat(ドロー)</dt>
	  <dd>
	   #関数カードがthatスタックの表面(Front)から何枚かカードを積み下ろす(引き抜く)動作と同じです。<br>
	  </dd></dl>
	  <dl><dt>pushFthat(リターン)</dt>
	  <dd>
	   #関数カードがthatスタックの表面(Front)に何枚かカードを積み上げる(差し込む)動作と同じです。<br>
	  </dd></dl>
	 </section>
	 <section>
	  <h2 id="grammar-9">{?TSFgrammar09title}</h2>
	  <p>
	   ppppと4thの間に入る「副詞」で操作するカードの位置を指示します(未実装な副詞仕様のつもりで説明します)。<br>
	   pppp以外でもreplaces、alias、casesなどの動詞で同じような副詞が登場。<br>
	   動詞の種類によっては意味をなさない副詞もあるので注意。<br>
	  </p>
	  <dl><dt>「F」Front(カード表択)</dt>
	  <dd>
	   表面、一番上(tsv表現では右端なので末尾)に積まれたカードを選択。<br>
	  </dd></dl>
	  <dl><dt>「N」Number(カード順択)</dt>
	  <dd>
	   表面、一番上(tsv表現では右端なので末尾)から数えて数値を指定して選択。ゼロから数える。<br>
	  </dd></dl>
	  <dl><dt>「C」Cycle(カード周択)</dt>
	  <dd>
	   順択「N」の指定枚数がスタックのカード枚数を上回る(下回る)場合、ゼロから数え直します。いわゆるmod演算子の要領。<br>
	   周択ではマイナス1の時は表択になり以下逆順+1になるので注意。<br>
	  </dd></dl>
	  <dl><dt>「M」liMit(カード囲択)</dt>
	  <dd>
	   順択「N」の指定枚数がスタックのカード枚数を上回る(下回る)場合、max演算子min演算子の組み合わせ(HSPのlimit)、いわゆるmin(max(N,0),len-1)の要領。<br>
	  </dd></dl>
	  <dl><dt>「V」reVerse(カード逆択)</dt>
	  <dd>
	   順択「N」と逆順に(底面、一番下、tsv表現では左端先頭から)数えた数値で選択。ゼロから数える。<br>
	  </dd></dl>
	  <dl><dt>「A」rAndom(カード乱択)</dt>
	  <dd>
	   スタック内カードをランダムに選択。乱択で使う乱数の定義はTSFでは定めない(実装する言語のリストオブジェクトに同等の機能があれば使う)ので、乱数を別途用意して順択「N」を用いる必要に迫られるケースがごくまれに発生するかも。<br>
	  </dd></dl>
	  <dl><dt>「Q」eQual(カード同択)</dt>
	  <dd>
	   枚数指定のような数値ではなく文字列で同じカードを選択。同じカードが何枚あっても一枚にまとめる。<br>
	   peekQだと無駄っぽいがpullQだと同じ文字列のカードをまとめて引き抜く的な(予定というか未実装)。<br>
	  </dd></dl>
	  <dl><dt>「I」In(カード含択)</dt>
	  <dd>
	   文字列が含まれるで同じカードを選択。カードの枚数は動詞による。<br>
	   peekQでも似た名前のカードが複数引き抜きされるので枚数が付加される(予定というか未実装)。<br>
	  </dd></dl>
	  <dl><dt>「R」Regex(カード規択)</dt>
	  <dd>
	   正規表現に該当するカードを選択。カードの枚数は動詞による。<br>
	   似た名前のカードが複数引き抜きされるので枚数が付加される(予定というか未実装)。<br>
	   TSFを実装する言語毎に正規表現の方言が存在しそうな問題。<br>
	  </dd></dl>
	  <dl><dt>「H」matcHer(カード似択)</dt>
	  <dd>
	   文字列の一致度が一定数以上のカードを選択。カードの枚数は動詞による。<br>
	   Pythonにあったdifflib.SequenceMatcher().ratio()みたいな関数がD言語その他で再現できるか不明なので保留。<br>
	   pppp以外、例えば「#!TSF_replacesQDN」で可能でも「#!TSF_replacesQSN」の時に文字数の組み合わせ爆発懸念。<br>
	  </dd></dl>
	  <dl><dt>「L」Label(カード札択)</dt>
	  <dd>
	   文字列の一致度が一定数以上のカードを選択。カードの枚数は動詞による。<br>
	   LTSVなどを読み込む場合などに使用。<br>
	  </dd></dl>
	  <p>
	   replaces、alias、casesなどの動詞ではカードなのかスタック名なのか明確もしくは臨機応変するため数量詞が加わります。<br>
	  </p>
	  <dl><dt>「S」Stack(スタック名)</dt>
	  <dd>
	   同名のカードが存在しても、スタックを用います。<br>
	  </dd></dl>
	  <dl><dt>「D」carD(文字列カード)</dt>
	  <dd>
	   同名のスタックが存在しても、1枚のカード束とみなします。<br>
	  </dd></dl>
	  <dl><dt>「O」stack Or card(スタック名か文字列カードか臨機応変)</dt>
	  <dd>
	   スタックが存在すればスタックを用い、スタックが存在しなければスタック名そのものを1枚のカード束とみなします。<br>
	  </dd></dl>
	 </section>
	 <section>
	  <h2 id="‎shell-0">{?TSFshell00title}</h2>
	  <p>
	   TSFのコマンドシェル部分です。TSFファイルを読み込んで実行するか内蔵の各種サンプルを実行する事ができます。<br>
	   またTSFファイルをD言語やPythonに変換(インタプリタを呼び出す形)する事も可能です。<br>
	  </p>{@TSF_main}
	 </section>
	 <section>
	  <h2 id="Io-0">{?TSFIo00title}</h2>
	  <p>
	   TSFインタプリンタ以前の実装言語毎にprintf/writelnといった文字出力の仕様差(特にPythonの2と3)を吸収するモジュールです。<br>
	   ファイル読み書きやコマンド受付などの文字コード処理やRPN電卓(テキストの数値変換)も用意してます。<br>
	  </p>{@TSF_Io}
	 </section>
	 <section>
	  <h2 id="Io-1">{?TSFIo01title}</h2>
	  <p>
	   RPN電卓は「TSF --RPN "1,2+"」のようにコマンド上から試す事ができます。<br>
	   RPNでない方の電卓は「TSF --calc "1+2"」と詳細は「TSF_Calc(calc.html)」で説明予定です。<br>
	  「#!TSF_echoN」など数値が要求されるカードでも構文チェックでRPN電卓の処理が行われます。<br>
	  </p>
	  <p>
	   RPNは分数も浮動小数に変換して計算するので丸め誤差が発生します。指数表示は0で補完され、指数化されない小数は10桁表示です。<br>
	   「12345679*9」が「p111111111|1」になるっていうネタですら「12345679,9*」で計算すると「p111111000」(12345679自体がが浮動小数で1.23457e+07)になります(Python版だと逆に「p111111111」と計算できてしまう)。<br>
	   計算精度が必要な場合calc電卓が必要になります(calc電卓内でもコンマ「,」が含まれる式はRPNで処理されます)。<br>
	  </p>
	  <dl><dt>
	   数値(10進数)「0」「1」「2」「3」「4」「5」「6」「7」「8」「9」と数値区切り「,」
	  </dt><dd>
	   数値はコンマで区切ります。演算子と数値の間にコンマは無用です。<br>
	  </dd></dl>
	  <dl><dt>
	   16進数「$」「U+」「0x」「a」「b」「c」「d」「e」「f」
	  </dt><dd>
	   数値の頭に「$」がある場合16進数とみなします。式の冒頭でのみ「U+」「0x」を受け付けます。<br>
	  </dd></dl>
	  <dl><dt>
	   符号「p」「m」
	  </dt><dd>
	   TSFでは演算子「+」「-」と正負の符号「p」「m」は区別されます。<br>
	  </dd></dl>
	  <dl><dt>
	   分数「|」と小数「.」
	  </dt><dd>
	   TSFでは演算子「/」と分数「|」は区別します(TSFでは分数は割り算ではなく数値扱い)。<br>
	   分数「|」はそれ自体が数値なのでRPNでは「1|2」は「0.5」で計算します。分数の小数化は四則演算より優先されます。<br>
	   ゼロ除算発生の場合分母ゼロ「n|0」を返します。<br>
	  </dd></dl>
	  <dl><dt>
	   四則演算「+」「-」「*」「/」
	  </dt><dd>
	   RPNには足し算「+」引き算「-」掛け算「*」割り算「/」などに優先順位がありません。<br>
	   calcで「1+2」と計算する場合は「1,2+」の様に記述します。「1+2+3」なら「1,2+3+」です。<br>
	   式の冒頭で「+」「-」が使われた場合「p」「m」符号とみなします。「/」は分数「1|」とみなします。<br>
	   0で割り算すると分母ゼロ「n|0」を返します。<br>
	  </dd></dl>
	  <dl><dt>
	   割り算派生「\」「_」「#」
	  </dt><dd>
	   「\」は小数点以下切り捨て。計算結果が負数であってもゼロの方向に丸めます。<br>
	   「_」は小数点以下切り上げ。計算結果が負数であってもゼロから遠ざかる方向に丸めます。<br>
	   「#」は除算(割り算の余りモジュロmod)。負数で割る場合循環小数的に振る舞う仕様。例えば「m1,m4#」だと「m1|1」ではなく4-1で「p3|1」を出力。<br>
	   0で割り算すると分母ゼロ「n|0」を返します。<br>
	  </dd></dl>
	  <dl><dt>
	   百分率「%」
	  </dt><dd>
	   「%」は消費税のような割合計算。「100,8%」で「p108」。「100,m5%」で「p95」。<br>
	  </dd></dl>
	  <dl><dt>
	   冪乗「^」
	  </dt><dd>
	   TSFでは0以下の乗算はゼロ除算とみなす(分母ゼロ「n|0」)ので注意。<br>
	  </dd></dl>
	  <dl><dt>max「&lt;」min「&gt;」</dt><dd>
	   「&lt;」は大きい数値、「&gt;」は小さい数値を残す。不等号式ではないので注意。<br>
	  </dd></dl>
	  <dl><dt>
	   比較演算子「Z」「z」「O」「o」「U」「u」
	  </dt><dd>
	   比較演算子は「2,1,0Z」のように三項を用いる。便宜上数値に「L,R,F」と名前を付けて説明。条件を満たす時Lを残し満たさない時Rを残す。<br>
	   「Z」はFがゼロの時左辺Lを残す。「Z」はFがゼロでない時左辺Lを残す。<br>
	   「O」はFがゼロ以上の時左辺Lを残す。「o」はFがゼロを越える時左辺Lを残す。<br>
	   「U」はFがゼロ以下時左辺Lを残す。「u」はFがゼロ未満の時左辺Lを残す。<br>
	   大文字だとゼロを含むという覚え方が楽。<br>
	  </dd></dl>
	  <dl><dt>
	   平方根「R」とアークタンジェント(atan2)「A」とユークリッド距離「H」
	  </dt><dd>
	   「R」は平方根√計算です。例えば「2R」で「p1.4142…(√2)」になり、面積が分かってる正方形の一辺を求めます。負数(0未満)の場合分母ゼロ「n|0」を返します。<br>
	   「A」はアークタンジェント(atan2)です。原点から座標までの直線の角度(方角)をラジアンで求めます。「0,m1A」で「p3.14…(円周率π)」になると思います。<br>
	   「H」はユークリッド距離(ユークリッドノルム,三平方の定理,ピタゴラスの定理,hypot)です。原点から座標までの直線の距離(直角三角形の斜辺)を求めます。「3,4H」で「p5」になります。<br>
	  <dd>
	  </dd></dl>
	  <dl><dt>
	   三角関数「S」「C」「T」「s」「r」「t」
	  </dt><dd>
	   「S」は正弦sin(斜辺/高さ)を求めます。「C」は余弦cos(斜辺/底辺)を求めます。「T」は正接tan(高さ/底辺)を求めます。<br>
	   「s」はアークサインarcsineです。アークサインの引数がプラスマイナス1の範囲外にはみ出た場合分母ゼロ「n|0」を返します。<br>
	   「r」はアークコサインarccosineです。「c」だと16進数と衝突するので「arccosine」の「r」です。アークコサインの引数がプラスマイナス1の範囲外にはみ出た場合分母ゼロ「n|0」を返します。「m1r」で「p3.14…(円周率π)」になると思います。<br>
	   「t」はアークタンジェントarctangentです。<br>
	  </dd></dl>
	  <dl><dt>
	   対数「E」「L」「l」
	  </dt><dd>
	   「E」はネイピア数を底とした対数(自然対数)を返します。<br>
	   「L」は10を底とした対数(常用対数)を返します。「1000L」なら「p3」を返す様に10進数のゼロの個数(桁数)を数える時などに使います。<br>
	   「l」は2を底とした対数(二進対数)を返します。「65536l」なら「p16」を返す様に2進数のビット数(桁数)を数える時などに使います。<br>
	   対数の引数が0以下の場合分母ゼロ「n|0」を返します。<br>
	  </dd></dl>
	 </section>
	 <section>
	  <h2 id="faq-0">{?TSFfaq00index}</h2>
	  <dl><dt>
	   Ｑ．タブ追加してインデント調整したら動かなくなったり暴走したりするんですけど？<br>
	  </dt><dd>
	   Ａ．CSVで勝手にコンマ追加したらセルの位置がズレるようなものです。タブ文字が2連続の場合、タブとタブの間には長さ0の文字列が発生します。<br>
	   　タブ文字が視認しづらい場合は等幅フォントでどうこうというよりも、タブ幅が1文字よりも狭くなるエディタに問題があると思います。<br>
	   　Vimはマウス入力に難ありですが、タブ幅を1文字以上確保してくれるという点ではTSV/LTSVやTSFを扱うには今の所適切です。<br>
	   　将来的にはTSFを用いてマウスやタッチパネルでも文字入力ができるエディタを作りたいですね。<br>
	  </dd></dl>
	  <dl><dt>
	   Ｑ．ローカル変数とか無いのですか？<br>
	  </dt><dd>
	   Ａ．そもそもTSFに変数はありませんが、強いて喩えるなら全てグローバル変数みたいなものなので、その場しのぎなネーミングは衝突の恐れです。<br>
	   　もう少し喩えるなら他のプログラミング言語でも関数名の衝突には気を付けるはずです。TSFではオブジェクト的なモノも無いのに関数変数の区別もスコープの概念も無いので、<br>
	   　マージしたスクリプトから変数を直接呼び出せるメリットと衝突のデメリットが存在します。<br>
	  </dd></dl>
	  <dl><dt>
	   Ｑ．逆ポーランド記法が読み辛いです。<br>
	  </dt><dd>
	   Ａ．TSFには中置記法や括弧が使用可能なcalcがあります。一般的なForthの演算子ワード「+」「-」「*」「/」ようなカードは存在しません。<br>
	   　速度優勢で小数計算を用いるRPN、精度優先で桁数制限の無い分数計算を用いるcalc。状況に応じて「電卓」を使い分ける二刀流です。<br>
	  </dd></dl>
	  <dl><dt>
	   Ｑ．0の0乗も0に何を掛けても0なのだから0ではないのか？<br>
	   Ｑ．0の0乗であっても0乗は常に1ではないのか？<br>
	  </dt><dd>
	   Ａ．0の0乗はゼロ除算0÷0だから分母ゼロ「n|0」です。少なくともTSFでは0で割る計算は分母ゼロ「n|0」です。<br>
	   　例えばx<sup>2</sup>－x<sup>2</sup>は(x＋x)(x－x)やx(x-x)に因数分解できる。<br>
	   　式(x＋x)(x－x)=x(x-x)の両辺を(x-x)で割ると(x＋x)=xすなわち2x=1x。両辺を再度xで割ると2=1。<br>
	   　極限が1になるとか言われてもプログラミングで2-1と1-1が同じになるような理屈は困るわけです。<br>
	  </dd></dl>
	  <dl><dt>
	   Ｑ．TSFで作ったプログラムを実行ファイルにできますか？<br>
	  </dt><dd>
	   Ａ．例えば「<a href="https://github.com/ooblog/TSF2KEV/blob/master/TSF_DMDcompile.sh" title="TSF2KEV/TSF_DMDcompile.sh at master · ooblog/TSF2KEV">TSF_DMDcompile.sh</a>」に「<a href="https://github.com/ooblog/TSF2KEV/blob/master/trans_quine.d" title="TSF2KEV/trans_quine.d at master · ooblog/TSF2KEV">trans_quine.d</a>」(「<a href="https://github.com/ooblog/TSF2KEV/blob/master/sample/sample_quine.tsf" title="TSF2KEV/sample_quine.tsf at master · ooblog/TSF2KEV">sample_quine.tsf</a>」をD言語に変換)を渡すと「TSF」バイナリの代わりに「trans_quine」バイナリが作られます。<br>
	   　TSFを一旦D言語に変換する形でTSFの実行バイナリが作れます(但しtrans_quineはD言語なのでD言語のソースを出力します)。<br>
	  </dd></dl>
	 </section>
	 <aside class="modpages"><nav>
	  {?TSFpages}
	 </nav></aside>
	
{?TSFpages}
	{$TSFpages_index}	{$TSFpages_404}
{$TSFpages_index}
	  <ul class="modpages_li">
#!	   <li><a href="index.html">TSF+TSF_Io(index.html)</a></li>
#!	   <li><a href="forth.html">TSF_Forth(forth.html)</a></li>
#!	   <li><a href="calc.html">TSF_Calc(calc.html)</a></li>
#!	   <li><a href="time.html">TSF_Time(time.html)</a></li>
#!	   <li><a href="urlpath.html">TSF_Time(urlpath.html)</a></li>
#!	   <li><a href="match.html">TSF_Match(match.html)</a></li>
#!	   <li><a href="trance.html">TSF_Trans(trance.html)</a></li>
	   <li>TSF+TSF_Io(index.html)</li>
	   <li><a href="forth.html">TSF_Forth(forth.html)</a></li>
	   <li>TSF_Calc(calc.html)</li>
	   <li>TSF_Time(time.html)</li>
	   <li>TSF_Urlpath(urlpath.html)</li>
	   <li>TSF_Match(match.html)</li>
	   <li>TSF_Trans(trance.html)</li>
	  </ul>
{$TSFpages_404}
	  <ul class="modpages_li">
	   <li><a href="index.html">TSF+TSF_Io(index.html)</a></li>
	   <li>TSF_Forth(forth.html)</li>
	   <li>TSF_Calc(calc.html)</li>
	   <li>TSF_Time(time.html)</li>
	   <li>TSF_Urlpath(urlpath.html)</li>
	   <li>TSF_Match(match.html)</li>
	   <li>TSF_Trans(trance.html)</li>
	  </ul>
{$TSFsection_forth}
	  <ul>
	   <li><a href="index.html#License-0" title="{?TSFlicense00title}">{?TSFlicense00title}</a></li>
	   <li><a href="index.html#License-1" title="{?TSFlicense01title}">{?TSFlicense01title}</a></li>
	   <li><a href="index.html#License-2" title="{?TSFlicense02title}">{?TSFlicense02title}</a></li>
	   <li><a href="index.html#License-3" title="{?TSFlicense03title}">{?TSFlicense03title}</a></li>
	   <li><a href="index.html#grammar-0" title="{?TSFgrammar00title}">{?TSFgrammar00title}</a></li>
	   <li><a href="index.html#grammar-1" title="{?TSFgrammar01title}">{?TSFgrammar01title}</a></li>
	   <li><a href="index.html#grammar-2" title="{?TSFgrammar02title}">{?TSFgrammar02title}</a></li>
	   <li><a href="index.html#grammar-3" title="{?TSFgrammar03title}">{?TSFgrammar03title}</a></li>
	   <li><a href="index.html#grammar-4" title="{?TSFgrammar04title}">{?TSFgrammar04title}</a></li>
	   <li><a href="index.html#grammar-5" title="{?TSFgrammar05title}">{?TSFgrammar05title}</a></li>
	   <li><a href="index.html#grammar-6" title="{?TSFgrammar06title}">{?TSFgrammar06title}</a></li>
	   <li><a href="index.html#grammar-7" title="{?TSFgrammar07title}">{?TSFgrammar07title}</a></li>
	   <li><a href="index.html#grammar-8" title="{?TSFgrammar08title}">{?TSFgrammar08title}</a></li>
	   <li><a href="index.html#grammar-9" title="{?TSFgrammar09title}">{?TSFgrammar09title}</a></li>
	   <li><a href="index.html#‎shell-0" title="{?TSFshell00title}">{?TSFshell00title}</a></li>
	   <li><a href="index.html#Io-0" title="{?TSFIo00title}">{?TSFIo00title}</a></li>
	   <li><a href="index.html#Io-1" title="{?TSFIo01title}">{?TSFIo01title}</a></li>
	   <li><a href="#forth-0" title="{?TSFforth00title}">{?TSFforth00title}</a></li>
	   <li>⑤-0．「TSF_Calc.d」「TSF_Calc.py」の#関数カード一覧。</li>
	   <li>⑤-1．「TSF_Calc.d」「TSF_Calc.py」のAPI一覧。</li>
	   <li>⑤-2．「TSF_Time.d」「TSF_Time.py」の電卓フォーマットの解説。</li>
	   <li>⑥-0．「TSF_Time.d」「TSF_Time.py」の#関数カード一覧。</li>
	   <li>⑥-1．「TSF_Time.d」「TSF_Time.py」のAPI一覧。</li>
	   <li>⑥-2．「TSF_Time.d」「TSF_Time.py」の日時フォーマットの解説。</li>
	   <li>⑦-0．「TSF_Urlpath.d」「TSF_Urlpath.py」の#関数カード一覧。</li>
	   <li>⑦-1．「TSF_Urlpath.d」「TSF_Urlpath.py」のAPI一覧。</li>
	   <li>⑧-0．「TSF_Match.d」「TSF_Match.py」の#関数カード一覧。</li>
	   <li>⑧-1．「TSF_Match.d」「TSF_Match.py」のAPI一覧。</li>
	   <li>⑨-0．「TSF_Trans.d」「TSF_Urlpath.py」の#関数カード一覧。</li>
	   <li>⑨-1．「TSF_Trans.d」「TSF_Urlpath.py」のAPI一覧。</li>
	   <li><a href="index.html#faq-0" title="{?TSFfaq00index}">{?TSFfaq00index}</a></li>
	   <li><a href="#faq-1" title="{?TSFfaq01forth}">{?TSFfaq01forth}</a></li>
	   <li><a href="#address-0" title="{?TSFaddress00title}">{?TSFaddress00title}</a></li>
	  </ul>
	 </section>
	 <section>
	  <h2 id="forth-0">{?TSFforth00title}</h2>
	  <p>
	  TSFインタプリンタ実行モジュールです。<br>
	  テキストファイル操作やRPN電卓などTSF_Io関連と、PPPPスタック操作が中心です。<br>
	  </p>{@TSF_Forth}
	 </section>
	 <section>
	  <h2 id="faq-1">{?TSFfaq01forth}</h2>
	  <dl><dt>
	   Ｑ．同じような関数(PeekPokePullPush系統)はまとめられないのですか？<br>
	  </dt><dd>
	   Ａ．同じようでいて違う関数なので大量発生してます。特に「F」系統でドローしないリターンされない系の例外が存在します。<br>
	  </dd></dl>
	  <dl><dt>
	   Ｑ．D言語ならmixin使えばいいので「code_PPPP.tsf」いらなくない説。<br>
	  </dt><dd>
	   Ａ．D言語じゃない言語ではコンパイル時ソース生成ができない場合があるので別途ソースコード生成プログラムは必要。<br>
	  </dd></dl>
	 </section>
	 <aside class="modpages"><nav>
	  {?TSFpages}
	 </nav></aside>
{$TSFsection_404}
	  <ul>
	   <li><a href="index.html">{$TSFicon_TSFindex}{$TITLE_TSFindex}</a></li>
	   <li><a href="TSFdoc.html">{$TSFicon_TSFdoc}{$TITLE_TSFdoc}</a></li>
	   <li><a href="KEV2.html">{$TSFicon_KEV2}{$TITLE_KEV2}</a></li>
	  </ul>
	 </section>
{$TSFsection_TSFdoc}
	  <ul>
	   <li><a href="#License-0" title="{?TSFlicense00title}">{?TSFlicense00title}</a></li>
	   <li><a href="#License-1" title="{?TSFlicense01title}">{?TSFlicense01title}</a></li>
	   <li><a href="#License-2" title="{?TSFlicense02title}">{?TSFlicense02title}</a></li>
	   <li><a href="#License-3" title="{?TSFlicense03title}">{?TSFlicense03title}</a></li>
	   <li>①-0．「TSFdoc」の使い方。</li>
	   <li>①-1．「TSFdoc」で必要になるスタックと上書きしてはいけないスタック。</li>
	   <li>①-2．「TSFdoc」の文法っぽい慣習。</li>
	   <li><a href="#faq-0" title="{?TSFfaq00index}">{?TSFfaq00index}</a></li>
	   <li><a href="#address-0" title="{?TSFaddress00title}">{?TSFaddress00title}</a></li>
	  </ul>
	 </section>
	{?TSFlicense00}
	  <p>
	   ※TSFdocはTSFの一部として組み込まれています。<br>
	  </p>
	  <dl><dt>「TSF2KEV」はプログラミング言語「TSF_Tab-Separated-Forth」のD言語とPythonによる実装です。</dt><dd><a href="https://ooblog.github.io/TSF2KEV/index.html" title="「TSF2KEV」はプログラミング言語「TSF_Tab-Separated-Forth」のD言語とPythonによる実装です。">https://ooblog.github.io/TSF2KEV/index.html</a></dd></dl>
	 </section>
	{?TSFlicense02}
	 </section>
	 <section>
	  <h2 id="License-3">{?TSFlicense03title}</h2>
	  <p>
	   ソースコードから関数一覧とコメントを抽出してAPI一覧を生成する機能がまだ未実装です。<br>
	  </p>
	 </section>
	 <section>
	  <h2 id="faq-0">{?TSFfaq00index}</h2>
	  <dl><dt>
	   Ｑ．「TSFimport_regex:」で正規表現を使う箇所があるのですがD言語とPythonで正規表現の違いがあると挙動が変わりませんか？<br>
	  </dt><dd>
	   Ａ．実装言語毎に正規表現の方言があるはずです。TSF側で正規表現の方言の吸収(TSF自前で正規表現)は行わないので注意。<br>
	  </dd></dl>
	 </section>
{$TSFsection_KEV2}
	  <ul>
	   <li><a href="#License-0" title="{?TSFlicense00title}">{?TSFlicense00title}</a></li>
	   <li><a href="#License-1" title="{?TSFlicense01title}">{?TSFlicense01title}</a></li>
	   <li><a href="#License-2" title="{?TSFlicense02title}">{?TSFlicense02title}</a></li>
	   <li><a href="#License-3" title="{?TSFlicense03title}">{?TSFlicense03title}</a></li>
	   <li>①-0．「KEV2」の使い方概要。漢字変換と漢直入力の違いや単漢字検索などの解説。</li>
	   <li>①-1．「KEV2」がVimを拡張する操作(マッピング)</li>
	   <li>①-2．「KEV2」がVimに追加するメニュー</li>
	   <li>②-0．漢字配列の解説。</li>
	   <li>②-1．都道府県国名などの字引。</li>
#!	   <li><a href="#faq-0" title="{?TSFfaq00index}">{?TSFfaq00index}</a></li>
	   <li>{?TSFfaq00index}</li>
	   <li><a href="#address-0" title="{?TSFaddress00title}">{?TSFaddress00title}</a></li>
	  </ul>
	 </section>
	{?TSFlicense00}
	  <p>
	   ※Vimが別途インストールされているものとします(Vimのバージョン等は環境毎に差異があります)。<br>
	  </p>
	  <dl><dt>Ubuntu – trusty の vim-gtk パッケージに関する詳細</dt><dd><a href="https://packages.ubuntu.com/trusty/vim-gtk" title="Ubuntu – trusty の vim-gtk パッケージに関する詳細">https://packages.ubuntu.com/trusty/vim-gtk</a></dd></dl>
	  <dl><dt>Vim — KaoriYa</dt><dd><a href="https://www.kaoriya.net/software/vim/](https://www.kaoriya.net/software/vim/" title="Vim — KaoriYa">https://www.kaoriya.net/software/vim/](https://www.kaoriya.net/software/vim/</a></dd></dl>
	 </section>
	{?TSFlicense02}
	 </section>
	 <section>
	  <h2 id="License-3">{?TSFlicense03title}</h2>
	  <p>
	   現在「<a href="https://github.com/ooblog/TSF2KEV/blob/master/KEV2/kanmap.tsf" title="TSF2KEV/kanmap.tsf at master · ooblog/TSF2KEV">KEV2/kanmap.tsf</a>」などを編集するツールがないので直接Vimなどのテキストエディタで編集する形になります。<br>
	   漢直の配列や辞書やフォントの強化は「<a href="https://ooblog.github.io/TSF2KEV/index.html" title="「TSF2KEV」はプログラミング言語「TSF_Tab-Separated-Forth」のD言語とPythonによる実装です。">TSF</a>」にてGUIが実装されるまで先延ばしになります。<br>
	  </p>
	  <p>
	   辞書の内容が正しい事なんて保証されないので注意。謝罪も賠償も配慮も便宜も忖度もありません。<br>
	  </p>
	 </section>
{?TSFlicense00title}
	⓪-0．ライセンスの解説など(index.html)	⓪-0．ライセンスの解説など(index.html)	⓪-0．ライセンスの解説など
{?TSFlicense00}
	{$TSFlicense00}
{$TSFlicense00}
	 <section>
	  <h2 id="License-0">{?TSFlicense00title}</h2>
	   <p>※「MIT License」準拠。<br></p>
	   <dl><dt>MIT License - Choose a License</dt><dd><a href="http://choosealicense.com/licenses/mit/" title="MIT License - Choose a License">http://choosealicense.com/licenses/mit/</a></dd></dl>
	   <dl><dt>licenses/MIT_license - Open Source Group Japan Wiki - Open Source Group Japan - OSDN</dt><dd><a href="https://ja.osdn.net/projects/opensource/wiki/licenses%2FMIT_license" title="licenses/MIT_license - Open Source Group Japan Wiki - Open Source Group Japan - OSDN">https://ja.osdn.net/projects/opensource/wiki/licenses%2FMIT_license</a></dd></dl>
	   <dl><dt>MITライセンスを1行1行読んでいく | プログラミング | POSTD</dt><dd><a href="http://postd.cc/mit-license-line-by-line/" title="MITライセンスを1行1行読んでいく | プログラミング | POSTD">http://postd.cc/mit-license-line-by-line/</a></dd></dl>
	 </section>
	 <section>
	  <h2 id="License-1">{?TSFlicense01title}</h2>
	  <p>
	  「Tahrpup6.0.5,Python2.7.6,dmd2.074.0,vim.gtk7.4.52(vim-gtk)」および<br>
	  「Wine1.7.18,Python3.4.4,dmd2.074.0,gvim8.0.134(KaoriYa)」で開発中。<br> 
	  </p>
{?TSFlicense01title}
	⓪-1．動作環境(index.html)	⓪-1．動作環境(index.html)	⓪-1．動作環境
{?TSFlicense02title}
	⓪-2．インストール/アンインストール＆セットアップ(index.html)	⓪-2．インストール/アンインストール＆セットアップ(index.html)	⓪-2．インストール/アンインストール＆セットアップ
{?TSFlicense02}
	{$TSFlicense02}
{$TSFlicense02}
	 <section>
	  <h2 id="License-2">{?TSFlicense02title}</h2>
	   <p>
	    gitでリポジトリ「https://github.com/ooblog/TSF2KEV.git」を「Clone」するか、<br>
	    「https://github.com/ooblog/TSF2KEV/archive/master.zip」を「Download ZIP」して展開すると、<br>
	    「TSF2KEV」フォルダが作成されます。<br>
	   </p>
	   <dl><dt>プログラミング言語「TSF_Tab-Separated-Forth」開発中。</dt><dd><a href="https://github.com/ooblog/TSF2KEV" title="プログラミング言語「TSF_Tab-Separated-Forth」開発中。">https://github.com/ooblog/TSF2KEV</a></dd></dl>
	   <p>
	    VimでTSFを編集する場合は「<a href="https://github.com/ooblog/TSF2KEV/blob/master/vimsyntax/tsf.vim" title="TSF2KEV/tsf.vim at master · ooblog/TSF2KEV">vimsyntax/tsf.vim</a>」を「~/.vim/syntax/tsf.vim」にコピー。<br>
	    VimでKEVを用いた漢直入力などをする場合は「メニュー→編集(E)→起動時の設定(S)」で「&#126;/.vimrc」を開いて「filetype=tsf」や「:!TSF %」を追記。<br>
	   </p>
	   {?CODE}
	   syntax on
	   au BufRead,BufNewFile *.tsf set filetype=tsf
	   autocmd BufNewFile,BufRead *.tsf nnoremap {?&lt}F5{?&gt} :!TSF %{?&lt}CR{?&gt}
	   command KEV2tsf  :source &#126;/TSF2KEV/KEV2/kanedit.vim
	   {?/CODE}
	  <p>
	   Vimエディタでの設定が成功するとシンタックスが着色されるはずです。<br>
	   <img src="TSF_512x384.png" alt="TSF syntax image" title="TSFのシンタックス" width="512" height="384"><br>
	  </p>
{?TSFlicense03title}
	⓪-3．その他現在わかっている不具合や今後の課題などソフト使用の補足ガイドライン(index.html)	⓪-3．その他現在わかっている不具合や今後の課題などソフト使用の補足ガイドライン(index.html)	⓪-3．その他現在わかっている不具合や今後の課題などソフト使用の補足ガイドライン
{?TSFbodyfooter}
	{$TSFbodyfooter}
{$TSFbodyfooter}
	<section>
	 <h2 id="address-0">{?TSFaddress00title}</h2>
	 <p>
	  更新情報はGitHubやブログを確認してください。<br>
	 </p>
	 <dl><dt>ooblog/TSF2KEV(GitHub)</dt><dd><a href="https://github.com/ooblog/TSF2KEV" title="ooblog/TSF2KEV(GitHub)">https://github.com/ooblog/TSF2KEV</a></dd></dl>
	 <dl><dt>[TSF] - 大風呂ダ敷</dt><dd><a href="http://d.hatena.ne.jp/ooblog/searchdiary?word=*[TSF]" title="[TSF] - 大風呂ダ敷">http://d.hatena.ne.jp/ooblog/searchdiary?word=*[TSF]</a></dd></dl>
	 <dl><dt>[kanedit] - 大風呂ダ敷</dt><dd><a href="http://d.hatena.ne.jp/ooblog/searchdiary?word=*[kanedit]" title="[kanedit] - 大風呂ダ敷">http://d.hatena.ne.jp/ooblog/searchdiary?word=*[kanedit]</a></dd></dl>
	</section>
	
	<div class="gotop"><a href="#top">↑Top</a></div>
	<footer>
	 <p>site generator "<a href="https://github.com/ooblog/TSF2KEV/blob/master/sample/TSFdoc.tsf" title="TSF2KEV/TSFdoc.tsf at master · ooblog/TSF2KEV">TSFdoc.tsf</a>" repository：<a href="https://github.com/ooblog/TSF2KEV" title="ooblog/TSF2KEV: プログラミング言語「TSF_Tab-Separated-Forth」開発中。">https://github.com/ooblog/TSF2KEV</a></p>
	 <p class="ooblog">
	  #! -- Copyright (c) 2017 ooblog --<br>
	  #! License: MIT　<a href="https://github.com/ooblog/TSF2KEV/blob/master/LICENSE" title="TSF2KEV/LICENSE at master · ooblog/TSF2KEV">https://github.com/ooblog/TSF2KEV/blob/master/LICENSE</a><br>
	 </p>
	</footer>
{?TSFhtmlfooter}
	{$TSFhtmlfooter}
{$TSFhtmlfooter}
	
	</body></html>
{?TITLE}
	{$TITLE_TSFindex}	{$TITLE_TSFindex}	{$TITLE_404}	{$TITLE_TSFdoc}	{$TITLE_KEV2}
{$TITLE_TSFindex}
	「TSF2KEV」はプログラミング言語「TSF_Tab-Separated-Forth」のD言語とPythonによる実装です。
{$TITLE_404}
	TSF2KEVサイトマップ(404)
{$TITLE_TSFdoc}
	「TSFdoc」は「TSF2KEV」を用いたドキュメントジェネレーターです。
{$TITLE_KEV2}
	「KEV」はVimスクリプトでできてる漢字直接入力です(単漢字検索含む)。
{?TSFicon}
	{$TSFicon_TSFindex}	{$TSFicon_TSFindex}	{$TSFicon_TSFindex}	{$TSFicon_TSFdoc}	{$TSFicon_KEV2}
{$TSFicon_TSFindex}
	<img src="TSF2KEV_icon.png" width="48" height="48" alt="TSF2KEV" title="{$TITLE_TSFindex}">
{$TSFicon_TSFdoc}
	<img src="TSFdoc_icon.png" width="48" height="48" alt="TSFdoc" title="{$TITLE_TSFdoc}">
{$TSFicon_KEV2}
	<img src="KEV2_icon.png" width="48" height="48" alt="KEV2" title="{$TITLE_KEV2}">
{?TSFaddress00title}
	{$TSFaddress00_index}	{$TSFaddress00_index}	{$TSFaddress00_404}	{$TSFaddress00_TSFdoc}	{$TSFaddress00_KEV2}
{$TSFaddress00_index}
	⑪-0．作者について、例えば連絡先
{$TSFaddress00_404}
	作者について、例えば連絡先
{$TSFaddress00_TSFdoc}
	③-0．作者について、例えば連絡先
{$TSFaddress00_KEV2}
	④-0．作者について、例えば連絡先
{?TSFfaq00index}
	{$TSFfaq00_index}	{$TSFfaq00_index}	{}	{$TSFfaq00_TSFdoc}	{$TSFfaq00_KEV2}
{$TSFfaq00_index}
	⑩-0．「TSF」とIoモジュールのＦＡＱ(index.html)
{?TSFfaq01forth}
	⑩-1．ForthモジュールのＦＡＱ(forth.html)
{$TSFfaq00_TSFdoc}
	②-0．「TSFdoc」のＦＡＱ。
{$TSFfaq00_KEV2}
	③-0．「KEV2」のＦＡＱ。
{?TSFgrammar00title}
	①-0．TSFとForthとの差異(ワードをカードと呼ぶ)など(index.html)
{?TSFgrammar01title}
	①-1．TSF構文には括弧が存在しません。式というか電卓では括弧が使えます(index.html)
{?TSFgrammar02title}
	①-2．TSFには型どころか代入や束縛するような変数自体が存在しません。スコープもありません(index.html)
{?TSFgrammar03title}
	①-3．TSFには関数の返り値やreturn用タプル構造体を用意するなどの概念もありません(index.html)
{?TSFgrammar04title}
	①-4．TSFにはtry/catch文が存在しません。ゼロで割った場合などの時は分母ゼロ「n|0」が発生します(index.html)
{?TSFgrammar05title}
	①-5．TSFにはfor文やwhile文が無いので再帰がループです(index.html)
{?TSFgrammar06title}
	①-6．TSFにはif/else文やswitch/case文が無いので分岐は式(比較演算子)などを用います(index.html)
{?TSFgrammar07title}
	①-7．スタック代名詞4つの「th」this,that,the,theyとハウリングについて(index.html)
{?TSFgrammar08title}
	①-8．カードシャッフル動詞4つの「p」peek,poke,pull,pushとドロー＆リターンについて(index.html)
{?TSFgrammar09title}
	①-9．カード選択位置の副詞「FNCMVAQIRHL」と数量詞「SDO」ついて(index.html)
{?TSFshell00title}
	②-0．「TSF.d」「TSF.py」の関数一覧(index.html)
{?TSFIo00title}
	③-0．「TSF_Io.d」「TSF_Io.py」の関数一覧(index.html)
{?TSFIo01title}
	③-1．「TSF_Io.d」「TSF_Io.py」のRPN電卓の解説(index.html)
{?TSFforth00title}
	④-0．「TSF_Forth.d」「TSF_Forth.py」の関数一覧(forth.html)
{?CODE}
	<pre><code>
{?/CODE}
	</code></pre>
{?INDENT}
	    	
{?TAB}
	@T
{?NL}
	@E
{?MODIFY}
	@Tmodify:@4y@0m@0dm@wdec@0h@0n@0s

#! -- Copyright (c) 2017 ooblog --
#! License: MIT　https://github.com/ooblog/TSF2KEV/blob/master/LICENSE
