#! /usr/bin/env TSF2
TSF_Tab-Separated-Forth:
	echoTSF:	#!TSF_this	#!TSF_fin.
echoTSF:
	aboutTSF:	#!TSF_argvsthe	#!TSF_echoN	echoRPNcalc:	#!TSF_this
aboutTSF:
	
	○「TSF_Tab-Separated-Forth」の簡略説明。
	
	　Forth風インタプリタ。単位はtsv文字列。文字列の事をカードと呼称。カードの束をスタックと呼称。スタックの集まりをデッキと呼称。
	　文字から始まる行はスタック名。タブで始まる行はカードの束。シバン「#!」で始まる行(改行のみの行含む)はコメント扱いで読み飛ばし。
	
	○TSF構文には4つの「th」スタック代名詞(冠詞含む)「this」「that」「the」「they」が存在。
	
	　「this」は実行中のスタック。#関数カードの指示通りにカードを「ドロー(積み下ろし)」したり「リターン(積み上げ)」したりする。
	　「that」は積込先のスタック。#関数カードの返り値や#関数カード以外のカードが積み上げられる。
	　「the」は指定スタック。変数や配列やテキスト保存先として扱いたいスタックを一時的に呼び出す。
	　「they」はスタック名一覧。新規スタック作成や既存スタック削除の時、スタック名一覧自体をスタックの様に扱って整理する事もできる。
	
	○TSF構文のスタック操作には4つの「p」スタック動詞「peek」「poke」「pull」「push」が存在。
	
	　「peek」スタックからカードを読み込む。読込先スタックはそのままに「that」スタックにカードが積まれるのでカードが増殖する形になる。
	　「poke」スタックにカードを書き込む。スタックのカードは上書きされるので上書きされたカードが消失する形になる。
	　「pull」スタックからカードを引き抜く。通常は引抜先スタックから「that」スタックにカードが移動する形になる。
	　「push」スタックにカードを差し込む。通常は引抜先スタックに「that」スタックからカードが移動する形になる。
	
	○TSF構文の副詞「FNCMVAQIRHL」と可算名詞「SDO」などの説明はaboutでは簡略。
	
	　#関数カードの、ドロー(積み下ろし)は「pullFthat」リターン(積み上げ)は「pushFthat」してるとも言える。
	　代名詞と動詞の間にある「F」などが副詞。スタックに最後に積まれたカード、表面カードを選択するので表択。
	　「peekNthe」等の「N」は積まれた順に番号を割り振り番号で読込カード指定するので順択、というようにどのカードをppppするのか明記します。
	
	○TSF式として2種類の電卓「#!TSF_RPN」「#!TSF_calc」が存在。
	　calcでは括弧や分数なども使えます。RPNは括弧を処理しない上に小数のみなので高速です。
	　calcの括弧内外でRPNを使う事は可能です。コンマ「,」を用いるとRPNとみなされます。
	　TSFには変数がないので「#!TSF_joinN」「#!TSF_join[]」などを用いてカードを連結して式文字列を作ります。
	
echoRPNcalc:
	aboutRPNtest:	#!TSF_this	aboutRPNcalc:	#!TSF_argvsthe	#!TSF_echoN	echoURL:	#!TSF_this
aboutRPNtest:
	▽「1 3 m1|2」を「[2],[1]/[0]- #!TSF_join[]」で連結した「1,3/m1|2-」を「#!TSF_RPN」電卓→
	1	3	m1|2	[2],[1]/[0]-	#!TSF_join[]	#!TSF_RPN	2	#!TSF_joinN	#!TSF_echo
#!「#!TSF_RPN」電卓→p0.833333333333
	▽「1 , 3 / m1|2 -」を「6 #!TSF_join」で連結した「1,3/m1|2-」を「#!TSF_RPN」電卓→
	1	,	3	/	m1|2	-	6	#!TSF_joinN	#!TSF_RPN	2	#!TSF_joinN	#!TSF_echo
#!「#!TSF_RPN」電卓→p0.833333333333
	▽「1 3 m1|2」を「[2]/[1]-[0] #!TSF_join[]」で連結した「1/3-m1|2」を「#!TSF_calc」電卓→
	1	3	m1|2	[2]/[1]-[0]	#!TSF_join[]	#!TSF_calc	2	#!TSF_joinN	#!TSF_echo
#!「#!TSF_calc」電卓→p5|6
	▽「1 / 3 - m1|2 」を「5 #!TSF_join」で連結した「1/3-m1|2」を「#!TSF_calc」電卓→
	1	/	3	-	m1|2	5	#!TSF_joinN	#!TSF_calc	2	#!TSF_joinN	#!TSF_echo
#!「#!TSF_calc」電卓→p5|6
	▽「#!TSF_calc」のショートカット文法で「[aboutCALCdata:0]/[aboutCALCdata:1]-[aboutCALCdata:2]」(演算内容は「1/3-m1|2」)→
	[aboutCALCdata:0]/[aboutCALCdata:1]-[aboutCALCdata:2]	#!TSF_calc	2	#!TSF_joinN	#!TSF_echo
#!「#!TSF_calc」電卓→p5|6
aboutCALCdata:
	1	3	m1|2
aboutRPNcalc:
	
	○「#!TSF_RPN」と「#!TSF_calc」の共通点や差異の補足。
	　演算子の「+」プラス「-」マイナスと符号の「p」プラス「m」マイナスは分けて表記。割り算の「/」と分数の「|」も分けて表記。
	　calcの出力結果は基本分数ですが、「,(1|3)」のように括弧の外側でコンマを使う事で計算結果をRPNに渡す事ができます。
	　条件演算子がRPNでは「Z」「z」「O」「o」「U」「u」ですがcalcでは「Z~」「z~」「O~」「o~」「U~」「u~」「N~」とチルダ追加です。
	　calcではスタック名記述する「:」演算子が使えますが、RPNでは文字列を扱えないので分母ゼロ「n|0」も条件演算子の引数として使えません。
	　RPNでは冪乗「^」に小数が使えますが、calcは平方根立方根を扱えないので積集合「P」を整数限定の冪乗として代用します。
	
	○ゼロ除算関連の定義。
	　ゼロで割るなど計算できない場合は分母ゼロ「n|0」を出力します。
	　ゼロの負数乗算は分母ゼロ「n|0」を出力します。同様にゼロのゼロ乗算も1や0ではなく分母ゼロ「n|0」を出力します。
	　負数の剰余演算(モジュロ)は「#!TSF_peekCthe」のような循環小数的振る舞い、例えば「m1#m4」だと「m1|1」ではなく4-1で「p3|1」を出力。
	
echoURL:
	aboutURL:	#!TSF_argvsthe	#!TSF_echoN
aboutURL:
	○TSFの詳しい説明はローカルの「docs/index.html」かWeb上の「https://ooblog.github.io/TSF2KEV/」を確認してください(執筆中)。
	
	　Web版もTSF付属のローカル版も「docs/TSFindex.tsf」から「sample/TSFdoc.tsf」を用いて生成されてます。
	　TSFを用いると簡潔なプログラムが書けます。そしてこの「sample/sample_aboutTSF.tsf」文書自体もTSF言語で書かれてます。
	
	#! -- Copyright (c) 2017 ooblog --
	#! License: MIT　https://github.com/ooblog/TSF2KEV/blob/master/LICENSE
